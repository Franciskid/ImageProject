<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Photoshop3000</name>
    </assembly>
    <members>
        <member name="T:Photoshop3000.Annexes.ConvolutionMatrix">
            <summary>
            Classe contenant des matrices de convolution pouvant s'appliquer à un <see cref="T:Photoshop3000.Annexes.Filtre"/>
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.ConvolutionMatrix.Correctif">
            <summary>
            Correctif lors du calcul de filtrage
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.ConvolutionMatrix.MethodeFiltrage">
            <summary>
            Methode de filtrage : 0 = classique, 1 = bords ignorés, 2 = bords laissés tels quels.
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.TypesMatrix">
            <summary>
            Types de matrice de convolution dispo.
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.ConvolutionMatrix.GetMatrix">
            <summary>
            Récupère une copie de la matrice de convolution initialisée
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.ConvolutionMatrix.SetMatrix(System.Single[][])">
            <summary>
            Set la matrice de convolution avec la matrice entrée en paramètre
            </summary>
            <param name="matrixConv"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.ConvolutionMatrix.#ctor(System.Single[][],System.Int32)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.Annexes.ConvolutionMatrix"/> à partir d'un tableau de tableau de <see cref="T:System.Single"/>
            </summary>
            <param name="matrix">Matrice de convolution carrée</param>
            <param name="correctif">Valeur à ajouter à chaque pixel</param>
        </member>
        <member name="M:Photoshop3000.Annexes.ConvolutionMatrix.#ctor(Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.Annexes.ConvolutionMatrix"/> à partir d'un type <see cref="T:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre"/> de <see cref="T:Photoshop3000.Annexes.ConvolutionMatrix"/> spécifié
            </summary>
            <param name="t">Type de matrice de convolution</param>
        </member>
        <member name="T:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre">
            <summary>
            Différents types de matrices pour le filtrage
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Flou">
            <summary>
            Matrice de convolution 5x5 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Flou_De_Mouvement">
            <summary>
            Matrice de convolution 9x9
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.FlouGaussien">
            <summary>
            Matrice de convolution 3x3 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Repoussage_Léger">
            <summary>
            Matrice de convolution 3x3 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Repoussage_Fort">
            <summary>
            Matrice de convolution 5x5 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Bords_Renforcement">
            <summary>
            Matrice de convolution 3x3 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Bords_Affaiblissement">
            <summary>
            Matrice de convolution 5x5 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Bords_Détection">
            <summary>
            Matrice de convolution 3x3 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Sobel_Vertical">
            <summary>
            Matrice de convolution 3x3 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Sobel_Horizontal">
            <summary>
            Matrice de convolution 3x3 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Contraste">
            <summary>
            Matrice de convolution 3x3 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Aiguiser">
            <summary>
            Matrice de convolution 3x3 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Dessin">
            <summary>
            Matrice de convolution 5x5 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Lissage">
            <summary>
            Matrice de convolution 5x5 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.ConvolutionMatrix.ImageFiltre.Test">
            <summary>
            Test, à ignorer
            </summary>
        </member>
        <member name="T:Photoshop3000.Annexes.Filtre">
            <summary>
            Classe effectuant des opérations de filtrage sur des copies d'instances de <see cref="T:Photoshop3000.MyImage"/>
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Filtre.sommeTotale">
            <summary>
            Addition du total des éléments dans la matrice de convolution de cette instance
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Filtre.correctif">
            <summary>
            Valeur ajoutée à chaque valeur de pixel lors du calcul matriciel
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Filtre.MyImage">
            <summary>
            Récupère l'instance <see cref="T:Photoshop3000.MyImage"/> résultante du filtrage
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.Filtre.GetTotal(System.Single[][])">
            <summary>
            Renvoie la somme de tous les éléments du tableau
            </summary>
            <param name="convMat"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.Filtre.#ctor(Photoshop3000.MyImage,Photoshop3000.Annexes.ConvolutionMatrix)">
            <summary>
            Applique à une copie d'une instance <see cref="T:Photoshop3000.MyImage"/> le filtre <see cref="T:Photoshop3000.Annexes.ConvolutionMatrix"/> spécifié
            </summary>
            <param name="imageToFilter">Instance <see cref="T:Photoshop3000.MyImage"/> contenant les informations liées à l'image</param>
            <param name="convMat">Matrice de convolution</param>
        </member>
        <member name="M:Photoshop3000.Annexes.Filtre.ApplicationFiltre(Photoshop3000.MyImage,System.Single[][])">
            <summary>
            Multiplie chaque pixel d'une matrice et les pixels autours de ce pixel par une matrice de convolution
            Les bords ne sont pas ignorés mais calculés comme les autres pixels, leurs pixels voisins sont considérés comme étant noirs.
            </summary>
            <param name="imageToFilter"></param>
            <param name="convMatrix"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.Filtre.ApplicationFiltreRapide(Photoshop3000.MyImage,System.Single[][])">
            <summary>
            Multiplie chaque pixel d'une matrice et les pixels autours de ce pixel par une matrice de convolution
            Les bords ne sont pas ignorés et laissés tels quels.
            </summary>
            <param name="imageToFilter"></param>
            <param name="convMatrix"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.Filtre.ApplicationFiltreBords(Photoshop3000.MyImage,System.Single[][])">
            <summary>
            Multiplie chaque pixel d'une matrice et les pixels autours de ce pixel par une matrice de convolution.
            On prend les pixels à l'intérieur, "facon miroir", pour le calcul des bords.
            </summary>
            <param name="imageToFilter"></param>
            <param name="convMatrix"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.Filtre.ApplicationFiltreBords_Old(Photoshop3000.MyImage,System.Single[][])">
            <summary>
            Lent, ne pas utiliser. Laissé pour la postérité.
            </summary>
            <param name="imageToFilter"></param>
            <param name="convMatrix"></param>
        </member>
        <member name="T:Photoshop3000.Annexes.Fractale">
            <summary>
            Permet la création d'images de types fractales
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.image">
            <summary>
            Image de la fractale
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.graph">
            <summary>
            Graphique de l'image de la fractale, sur lequel réaliser des opérations sur l'image
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.imageKaléidocope">
            <summary>
            Image servant de référence pour la création d'une image type kaléidoscope
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.colors">
            <summary>
            Liste contenant les couleurs utilisées pour les fractales de type Mandelbrot
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.Contraste">
            <summary>
            Valeur du contraste de l'image
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.TailleFractJulia">
            <summary>
            Valeur du contraste de l'image
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.PositionJulia">
            <summary>
            Position de la fractale
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.MaxItération">
            <summary>
            Nombre d'itération max lors du calcul d'une fractale. (Pour une fractale de type Mandelbrot, à mettre entre 100-1000)
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.TailleMosaique">
            <summary>
            Taille d'une mosaique de kaléidoscope
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.CouleursHSL">
            <summary>
            Couleur utilisée pour représenter les fractales : <see langword="false"/> = couleurs RGB   <see langword="true"/> = couleurs HSL (=TSV, teinte, saturation, luminosité)
            Pas implémenté
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.MaxTryColor">
            <summary>
            Nombre de fois qu'on ré-essaie de trouver la bonne couleur pour le kaléidocsope à partir d'une <see cref="T:Photoshop3000.MyImage"/>
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.Type">
            <summary>
            Type de forme fractale à générer
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.CouleurDominante">
            <summary>
            Couleur dominante lors de la génération de kaléïdoscope
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.BackgroundColor">
            <summary>
            Couleur d'arrière plan, utilisée pour les formes récursives
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.MyImage">
            <summary>
            Récupère l'instance <see cref="T:Photoshop3000.MyImage"/> utilisée lors de la création de la fractale
            </summary>
        </member>
        <member name="P:Photoshop3000.Annexes.Fractale.UserEquation">
            <summary>
            Equation de l'utilisateur. <see cref="F:Photoshop3000.Annexes.Fractale.Fractales.UserEquationZSqrd"/> doit être sélectionné
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.Annexes.Fractale"/> avec les paramètres par défaut.
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.#ctor(System.Int32,System.Int32,Photoshop3000.Annexes.Fractale.Fractales)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.Annexes.Fractale"/> avec la taille de l'image et le type de <see cref="T:Photoshop3000.Annexes.Fractale.Fractales"/> à créer.
            </summary>
            <param name="height">Hauteur image</param>
            <param name="width">Largeur image (en général doit être de la même taille que la hauteur)</param>
            <param name="t">Type de fractale</param>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.#ctor(Photoshop3000.MyImage)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.Annexes.Fractale"/> avec la <see cref="T:Photoshop3000.MyImage"/> spécifiée
            </summary>
            <param name="image">Image</param>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.Draw">
            <summary>
            Crée une fractale à partir des paramètres pré-définis.
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.FractaleFromCompBeta(Photoshop3000.NombreComplex)">
            <summary>
            Forme fractale générée à partir d'une équation dans C
            </summary>
            <param name="equation"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.FractaleColor(Photoshop3000.NombreComplex,Photoshop3000.NombreComplex)">
            <summary>
            Renvoie un nombre issu du calcul de fractale pour la position donnée avec l'équation indiquée
            </summary>
            <param name="position"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.GetPixel(System.Double)">
            <summary>
            Renvoie une couleur à partir d'un nombre
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.FractaleFromForme">
            <summary>
            Autres formes fractales générées de manière récursive
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.TriangleRécursivité(System.Int32,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,System.Nullable{Photoshop3000.Pixel})">
            <summary>
            Dessine des triangles de manière récursive selon la forme de Sierpinski
            </summary>
            <param name="niveau"></param>
            <param name="positionTop"></param>
            <param name="positionBottomLeft"></param>
            <param name="positionBottomRight"></param>
            <param name="color"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.CarréRécursivité(System.Int32,Photoshop3000.Point,System.Double,System.Double)">
            <summary>
            Dessine des carrés de manière récursive selon la forme de Sierpinski
            </summary>
            <param name="niveau"></param>
            <param name="positionTopLeft"></param>
            <param name="largeur"></param>
            <param name="longueur"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.KochFlocon(Photoshop3000.Point,Photoshop3000.Point,System.Int32)">
            <summary>
            Dessine des triangles de manière récursive selon la forme du flocon de Kosh
            </summary>
            <param name="niveau"></param>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.ArbreRécursivité(Photoshop3000.Point,System.Int32,System.Int32,Photoshop3000.Pixel)">
            <summary>
            Dessine un arbre de manière récursive
            </summary>
            <param name="p"></param>
            <param name="angle"></param>
            <param name="profondeur"></param>
            <param name="couleur"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.CercleRec(System.Int32,System.Double)">
            <summary>
            Dessine des cercles de manière récursive de plus en plus petit avec le même centre à chaque génération
            </summary>
            <param name="radius"></param>
            <param name="nuanceCoul"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.CercleForme(Photoshop3000.Point,System.Single)">
            <summary>
            Dessine des cercles de manière récursive
            </summary>
            <param name="p"></param>
            <param name="rayon"></param>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.Kaléidoscope">
            <summary>
            Générateur de kaléidoscope aléatoire (formes : triangle et rond)
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.Mosaique">
            <summary>
            Mosaïque de kaléïdoscope. Le nombre de kaléidoscope est déterminé par <see cref="P:Photoshop3000.Annexes.Fractale.TailleMosaique"/>
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.InitializeColorList">
            <summary>
            Prend en paramètre des couleurs pour afficher des nuances
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.Fractale.FractalesToComp(Photoshop3000.Annexes.Fractale.Fractales)">
            <summary>
            Renvoie le <see cref="T:Photoshop3000.NombreComplex"/> associé à ce <see cref="T:Photoshop3000.Annexes.Fractale.Fractales"/>
            </summary>
            <param name="frac"></param>
            <returns></returns>
        </member>
        <member name="T:Photoshop3000.Annexes.Fractale.Fractales">
            <summary>
            Différents types de <see cref="T:Photoshop3000.Annexes.Fractale"/> supportées
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Mandelbrot">
            <summary>
            Forme de Mandelbrot selon l'équation z = z² + c 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Lapin">
            <summary>
            Forme fractale selon l'équation z = z² -0.123 + 0.745i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Dendrite_Normal">
            <summary>
            Forme fractale selon l'équation z = z² -i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Dentriste_Division">
            <summary>
            Forme fractale selon l'équation z = z² -0.1 -i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Ilots">
            <summary>
            Forme fractale selon l'équation z = z² + 0.1 + 0.65i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Ilots_Serpent">
            <summary>
            Forme fractale selon l'équation z = z² - 0.231 + 0.785i (mettre le contraste > 1)
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Escargot_quadruple_revolution">
            <summary>
            Forme fractale selon l'équation z = z² + 0.3 + 0.5i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Escargot_double_revolution">
            <summary>
            Forme fractale selon l'équation z = z² - 0.777 + 0.111i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.TrucStylé1">
            <summary>
            Forme fractale selon l'équation z = z² -0.39 - 0.59i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.TrucStylé2">
            <summary>
            Forme fractale selon l'équation z = z² - 0.1 - 0.65i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.TrucStylé3">
            <summary>
            Forme fractale selon l'équation z = z² - 3/4
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.TrucStylé4">
            <summary>
            Forme fractale selon l'équation z = z² - -0.512511498387 +  0.5212955730948i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.TrucStylé5">
            <summary>
            Forme fractale selon l'équation z = z² - -0.512511498387 +  0.5212955730948i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.TrucStylé6">
            <summary>
            Forme fractale selon l'équation z = z² - -0.512511498387 +  0.5212955730948i
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.UserEquationNewton">
            <summary>
            Equation de l'utilisateur de type z = z² + {nombre complexe de l'utilisateur}
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.UserEquationZSin">
            <summary>
            Equation de l'utilisateur de type z = sin(z) * {nombre complexe de l'utilisateur}
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.UserEquationZSqrd">
            <summary>
            Equation de l'utilisateur de type z = z² + {nombre complexe de l'utilisateur}
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Sierpinski_Triangle">
            <summary>
            Forme fractale générée de manière récursive
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Sierpinski_Tapis">
            <summary>
            Forme fractale générée de manière récursive
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Koch_Flocon">
            <summary>
            Forme fractale générée de manière récursive
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Koch_Flocon_Profondeur">
            <summary>
            Forme fractale générée de manière récursive
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Arbre_Descendant">
            <summary>
            Forme fractale générée de manière récursive
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Arbre_4_Cotés">
            <summary>
            Forme fractale générée de manière récursive
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Cercle_1">
            <summary>
            Forme fractale générée de manière récursive
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Cercle_2">
            <summary>
            Forme fractale générée de manière récursive
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Kaléidoscope">
            <summary>
            Forme générée aléatoirement
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Mosaique_Kaléïdoscope">
            <summary>
            Mosaïque de formes générées aléatoirement
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.Fractale.Fractales.Mosaique_From_Image">
            <summary>
            Mosaique de formes générées aléatoirement à partir d'une <see cref="T:Photoshop3000.MyImage"/>. Utiliser le constructeur avec un <see cref="T:Photoshop3000.MyImage"/> en paramètre
            </summary>
        </member>
        <member name="T:Photoshop3000.Annexes.HistogrammeMode">
            <summary>
            Différents types d'histogramme possible 
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.HistogrammeMode.Echelle_Gris">
            <summary>
            Histogramme d'échelle de gris
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.HistogrammeMode.Echelle_Couleurs">
            <summary>
            Histogramme des 3 couleurs R-G-B
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.HistogrammeMode.HSV">
            <summary>
            TSV, pas implémenté
            </summary>
        </member>
        <member name="T:Photoshop3000.Annexes.MyImageStats">
            <summary>
            Fournit des méthodes pour analyser une <see cref="T:Photoshop3000.MyImage"/> et afficher des statistiques sous forme d'image ou de texte.
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.MyImageStats.pixelsParIntensité">
            <summary>
            Nombre de pixels pour chaque intensité 0-255
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.MyImageStats.realWidth">
            <summary>
            Taille de l'histo demandée par l'utilisateur
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.MyImageStats.realHeight">
            <summary>
            Taille de l'histo demandée par l'utilisateur
            </summary>
        </member>
        <member name="F:Photoshop3000.Annexes.MyImageStats.couleursRGB">
            <summary>
            Couleurs aux extrémités de l'histogramme
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.#ctor(Photoshop3000.MyImage)">
            <summary>
            Initialise une nouvelle instance de <see cref="T:Photoshop3000.Annexes.MyImageStats"/> avec une <see cref="T:Photoshop3000.MyImage"/>
            </summary>
            <param name="image">Image</param>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.#ctor(Photoshop3000.MyImage,System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
            Initialise une nouvelle instance de <see cref="T:Photoshop3000.Annexes.MyImageStats"/> avec une <see cref="T:Photoshop3000.MyImage"/> et les dimensions de l'histogramme à réaliser
            </summary>
            <param name="image">Image</param>
            <param name="height">Hauteur de l'histogramme en nombre pixel</param>
            <param name="width">Largeur de l'histogramme en nombre pixel</param>
            <param name="minVal">Les pixels dont la valeur est en dessous sont ignorés</param>
            <param name="maxVal">Les pixels dont la valeur est au dessus sont ignorés</param>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.GetAverageColor(Photoshop3000.MyImage)">
            <summary>
            Renvoie un <see cref="T:Photoshop3000.Pixel"/> avec la couleur moyenne de l'image
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.GetMostOccurentPixel(Photoshop3000.MyImage)">
            <summary>
            Renvoie le Pixel qui apparait le plus fréquemment dans une image.
            Met plus d'une sec à partir de 20M pixels (4k * 5k).
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.GetPixelsByOccurence(Photoshop3000.MyImage)">
            <summary>
            Renvoie une liste avec le nombre d'occurences de chaque pixel unique de l'image associé à sa valeur.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.GetAverageBrightness(Photoshop3000.MyImage)">
            <summary>
            Renvoie la luminosité moyenne perçue par rapport à 255
            </summary>
            <param name="image">Image</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.GetAverageHue(Photoshop3000.MyImage)">
            <summary>
            Renvoie la teinte moyenne en degré % 360. 
            </summary>
            <param name="image">Image</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.GetAverageLightness(Photoshop3000.MyImage)">
            <summary>
            Renvoie la luminosité moyenne par rapport à 1
            </summary>
            <param name="image">Image</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.GetAverageSaturation(Photoshop3000.MyImage)">
            <summary>
            Renvoie la saturation moyenne par rapport à 1
            </summary>
            <param name="image">Image</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.IntensiteParCouleur(Photoshop3000.MyImage,System.Int32)">
            <summary>
            Renvoie le nombre de pixel par couleur (0-255) en fct d'une couleur (0 = bleu, 1 = vert, 2 = rouge, 3 = alpha s'il y a)
            </summary>
            <param name="image"></param>
            <param name="couleur">0, 1, 2 ou 3</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.CreateHistogramme">
            <summary>
            Crée un histogramme de l'image du nombre de pixels en fonction de l'intensité (0-255) selon un <see cref="P:Photoshop3000.Annexes.MyImageStats.HistogrammeMode"/> et des paramètres pré-définis
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.CreateHistogrammeTransparence">
            <summary>
            Crée un histogramme de l'image du nombre de pixels en fonction de l'intensité (0-255) selon un <see cref="P:Photoshop3000.Annexes.MyImageStats.HistogrammeMode"/> et des paramètres pré-définis. 
            Les couleurs sont ajoutées sur l'image avec une certaine transparence pour qu'elles soient toutes visibles
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.MyImageStats.CreateHistogrammeTransparenceLissage">
            <summary>
            Crée un histogramme de l'image du nombre de pixels en fonction de l'intensité (0-255) selon un <see cref="P:Photoshop3000.Annexes.MyImageStats.HistogrammeMode"/> et des paramètres pré-définis
            Les couleurs sont ajoutées sur l'image avec une certaine transparence pour qu'elles soient toutes visibles et les contours sont lissés.
            </summary>
        </member>
        <member name="T:Photoshop3000.Annexes.Stéganographie">
            <summary>
            Contient des méthodes pour cacher une image dans une image et la retrouver ainsi que 
            cacher du texte de manière pseudo-aléatoire à partir d'un mdp dans une image et le retrouver
            </summary>
        </member>
        <member name="M:Photoshop3000.Annexes.Stéganographie.CacherImage(Photoshop3000.MyImage,Photoshop3000.MyImage,System.Int32)">
            <summary>
            Cache un <see cref="T:Photoshop3000.MyImage"/> dans un <see cref="T:Photoshop3000.MyImage"/> visible à partir d'un nombre de bits à cacher.<para/>
            L'image à cacher l'est au centre de l'image visible, si elle est plus grande que l'image visible alors ses bords sont rognés pour rentrer dans l'image visible en largeur ou en hauteur<para/>
            </summary>
            <param name="imageVisible">Image visible</param>
            <param name="imageToHide">Image à cacher</param>
            <param name="nbBitsToHide">Nombre de bits à cacher sur 1 pixel</param>
        </member>
        <member name="M:Photoshop3000.Annexes.Stéganographie.CacherImage(Photoshop3000.MyImage,Photoshop3000.MyImage,System.Int32,System.Int32,System.Int32)">
            <summary>
            Cache un <see cref="T:Photoshop3000.MyImage"/> dans un <see cref="T:Photoshop3000.MyImage"/> visible à partir d'un nombre de bits à cacher.<para/>
            L'image à cacher l'est au point indiqué dans l'image visible, si ce point est en dehors de l'image, alors ses bords sont rognés.<para/>
            </summary>
            <param name="imageVisible">Image visible</param>
            <param name="imageCachée">Image à cacher</param>
            <param name="nbBitsToHide">Nombre de bits à cacher sur 1 pixel</param>
            <param name="origineX">Nombre de bits à cacher sur 1 pixel</param>
            <param name="origineY">Nombre de bits à cacher sur 1 pixel</param>
        </member>
        <member name="M:Photoshop3000.Annexes.Stéganographie.GetImageCachée(Photoshop3000.MyImage,System.Int32)">
            <summary>
            Renvoie une image cachée dans une autre
            </summary>
            <param name="imageVisible">Image à décoder</param>
            <param name="nbBitsHidden">Nombre de bits cachés sur 1 pixel</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.Stéganographie.CacherTexte(Photoshop3000.MyImage,System.String,System.String,System.Int32)">
            <summary>
            Cache du texte au format 8 bits (256 premiers chars du format UTF-8) dans les bits les moins importants d'une copie d'une image et renvoie le résultat. <para/>
            Les pixels sont choisis pseudo-aléatoirement à partir d'un mot de passe. Les charactères ne faisant pas partie du format 8 bits sont ignorés. <para/>
            On peut rajouter <see langword="\u0003"/> à la fin du texte pour signifier sa fin lors de la récupération.<para/>
            Ne pas utiliser la même image pour cacher 2 textes car l'un pourrait empiéter sur l'autre et corrompre certaines parties du texte. <para/>
            Ne pas sauvegarder l'image dans un format de compression susceptible de supprimer des données (exemple : JPEG) <para/>
            La longueur du texte par rapport à la taille de l'image n'influe pas sur le temps de calcul
            </summary>
            <param name="image">Image dans laquelle cacher du texte</param>
            <param name="textToHide">Le texte à cacher au format 8 bits. Si la longueur du texte sera inconnue lors du décodage, lui rajouter à la fin \u0003 </param>
            <param name="password">Mot de passe pour retrouver le texte par la suite. Pas de format particulier à respecter</param>
            <param name="nbreBitsCachés">Nombre de bits sur lesquels cacher le texte sur une couleur (rgb) d'un pixel. 1, 2, 4 ou 8</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Annexes.Stéganographie.GetTexteCaché(Photoshop3000.MyImage,System.String,System.Int32,System.Int32)">
            <summary>
            Récupère un texte caché dans un <see cref="T:Photoshop3000.MyImage"/> à partir d'un mot de passe et de la longueur du texte à trouver (pas obligé mais le texte doit alors finir par \u0003 pour signifier la fin).
            </summary>
            <param name="image">Image dans laquelle retrouver le message caché</param>
            <param name="password">Mot de passe</param>
            <param name="tailleMessage">Taille du message à retrouver. Si inconnue, laisser à 0, la longueur de texte maximale cherchée sera alors de 10 000 char sauf si on trouve un '\u0003' entre temps.</param>
            <param name="nbreBitsCachés">Nombre de bits utilisés pour cacher le message sur 1 pixel. 1, 2, 4 ou 8</param>
            <returns></returns>
        </member>
        <member name="T:Photoshop3000.Barcode.DrawBarcode1D">
            <summary>
            Fournit des méthodes pour dessiner des code-barres GTIN (EAN-13, UPCA, UPCE, EAN-8)
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.DrawBarcode1D.Size">
            <summary>
            Taille de l'image
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.DrawBarcode1D.BarWidth">
            <summary>
            Largeur d'une barre en pixel, mettre à 0 pour que les barres aient la largeur maximale pour remplir l'image.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.DrawBarcode1D.BackgroundClr">
            <summary>
            Couleur d'arrière plan (blanc par défaut, recommandé)
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.DrawBarcode1D.ForegroundClr">
            <summary>
            Couleur des barres (noir par défaut, recommandé)
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.DrawBarcode1D.DrawFlecheEAN">
            <summary>
            Si le code-barres à dessiner est un EAN-13 ou EAN-8, dessine ou non une petite flèche à la fin et/ou au début de celui-ci.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.DrawBarcode1D.DrawText">
            <summary>
            Spécifie si les charactères correspondants au code-barres sont écris en dessous de celui-ci.
            Peut prendre un certain temps à dessiner en fonction de la taille de l'image
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawBarcode1D.#ctor(Photoshop3000.Barcode.Barcode1D.BarcodeData)">
            <summary>
            Initialise une nouvelle instance à partir d'un <see cref="T:Photoshop3000.Barcode.Barcode1D.BarcodeData"/> à dessiner.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawBarcode1D.Draw">
            <summary>
            Dessine un code-barres à partir d'un <see cref="T:Photoshop3000.Barcode.Barcode1D.BarcodeData"/> valide.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawBarcode1D.GetLengthBar(System.Int32)">
            <summary>
            Renvoie la valeur de largeur d'une barre en fonction de la taille de l'image
            </summary>
            <param name="barlength"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawBarcode1D.DrawStringInRange(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Brush,System.String,System.Drawing.PointF,System.Drawing.PointF,System.Int32)">
            <summary>
            Dessine les nombres en dessous des barres
            </summary>
            <param name="g"></param>
            <param name="f"></param>
            <param name="br"></param>
            <param name="str"></param>
            <param name="debut"></param>
            <param name="fin"></param>
            <param name="hauteurMax"></param>
            <returns></returns>
        </member>
        <member name="F:Photoshop3000.Barcode.DrawBarcode1D.hauteurBarGuardPourc">
            <summary>
            taille = pourcentage de la largeur de l'image
            </summary>
        </member>
        <member name="T:Photoshop3000.Barcode.ScanBarcode1D">
            <summary>
            Fournit des méthodes pour scanner et manipuler des code-barres GTIN (EAN-13, UPCA, UPCE, EAN-8)
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.ScanBarcode1D.imageToDecode">
            <summary>
            Clone de <see cref="P:Photoshop3000.Barcode.Barcode1D.Image"/>.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.ScanBarcode1D.SuccessToScan">
            <summary>
            Renvoie <see langword="true"/> si l'opération de scan à réussie, <see langword="false"/> sinon.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.ScanBarcode1D.IsNumberSystem2Digits">
            <summary>
            Indique si le number system est à 2 ou 3 digits. Peut être à 1 seul digit si UPCA
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.ScanBarcode1D.MargeErreur">
            <summary>
            Marge d'erreur de la largeur d'une barre du code-barres, représente en % la taille maximale et minimale
            d'une barre en fonction de la largeur moyenne des barres du code-barres à décoder. Entre 0% et 30% max.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanBarcode1D.#ctor(Photoshop3000.MyImage,Photoshop3000.Barcode.Barcode1D.BarcodeTypes)">
            <summary>
            Initialise une nouvelle instance en fonction d'un <see cref="T:Photoshop3000.MyImage"/> à décoder et optionnellement du <see cref="T:Photoshop3000.Barcode.Barcode1D.BarcodeTypes"/> de cet MyImage.
            </summary>
            <param name="imageToDecode"></param>
            <param name="type"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanBarcode1D.Scan">
            <summary>
            Scan l'image en fonction du type de code barre utilisé.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanBarcode1D.InitializeScanData(System.Byte[])">
            <summary>
            Initialise le <see cref="!:ScanData"/> et check si le <see cref="!:scanner"/> correspond bien.
            </summary>
            <param name="decodedDigits"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanBarcode1D.TransformImageToScan">
            <summary>
            Transforme l'image à scanner pour isoler le code-barres
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanBarcode1D.GetLineImage(System.Int32)">
            <summary>
            Renvoie une ligne de l'image composée de 1 et de 0 à partir d'une hauteur donnée
            </summary>
            <param name="image"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanBarcode1D.ReductionLine(System.Byte[])">
            <summary>
            Réduit le surplus d'information d'une ligne d'image et ne renvoie que les barres du codes barres sous forme de 1 et de 0. Un digit pour chaque barre
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanBarcode1D.LengthBar(System.Byte[],System.Int32@)">
            <summary>
            Détermine la taille moyenne d'une barre et renvoie la taille de l'espace blanc avant la 1ere barre noire.
            </summary>
            <param name="line"></param>
            <param name="blank"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanBarcode1D.FindScanner">
            <summary>
            Essaye de détecter le <see cref="T:Photoshop3000.Barcode.Barcode1D.BarcodeTypes"/> sur cette image
            </summary>
            <returns></returns>
        </member>
        <member name="T:Photoshop3000.Barcode.Barcode1D">
            <summary>
            Classe de base des codes-barres à 1 dimension.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.Data">
            <summary>
            Contient toutes les informations liées au code-barres
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.Image">
            <summary>
            Renvoie l'image de ce <see cref="T:Photoshop3000.Barcode.Barcode1D"/>
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.#ctor(Photoshop3000.MyImage,Photoshop3000.Barcode.Barcode1D.BarcodeData)">
            <summary>
            Constructeur pour décoder un code-barres
            </summary>
            <param name="toScan"></param>
            <param name="data"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.ConvertBarcode(Photoshop3000.Barcode.Barcode1D.BarcodeTypes,System.String)">
            <summary>
            Convertit ce <see cref="T:Photoshop3000.Barcode.Barcode1D"/> sous une autre forme spécifiée et renvoie le succès ou non de l'opération à travers un message d'erreur.
            </summary>
            <param name="scannerToConvertTo">Scanner vers lequel convertir les données</param>
            <param name="manufacturerOpt">Si on convertit depuis un EAN8, il faut forcément le code du producteur à 5 chiffres, ne pas remplir sinon.</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.GetEncodedBits">
            <summary>
            Renvoie le <see cref="T:Photoshop3000.Barcode.Barcode1D.BarcodeData"/> sous forme d'un tableau de byte composé de 0 et de 1 encodé selon les normes du <see cref="T:Photoshop3000.Barcode.Barcode1D.BarcodeTypes"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.GetDecodedDigits(System.Byte[])">
            <summary>
            Renvoie un tableau de byte contenant les digits décodés à partir du tableau de byte de 0 et de 1 encodé selon les normes du <see cref="T:Photoshop3000.Barcode.Barcode1D.BarcodeTypes"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.FindCheckDigit(System.Byte[])">
            <summary>
            Renvoie le check digit, valeurs paires = * 1, valeurs impaires = * 3.
            </summary>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.ConvertByteRepresentationToString(System.Int32)">
            <summary>
            Convertit les 8 premiers bits d'un int en leur équivalent en string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.GetEncodedDigits(System.Byte[])">
            <summary>
            Renvoie un tableau contenant les digits encodés à partir de la ligne du code-barres composée de 0 et de 1 telle qu'elle.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.CheckValidité(System.Byte[])">
            <summary>
            Détermine si le code barre récupéré est valide ou non en fonction de son type.
            </summary>
            <param name="bars"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.TestCheckDigit(System.Byte[])">
            <summary>
            Détermine si le module des digits est bien égale au dernier digit de ce code barre.
            </summary>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.RemoveGuard(System.Byte[])">
            <summary>
            Renvoie la ligne de barres sans les barres guard
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.ConvertStringToByteArray(System.String)">
            <summary>
            Convertit un string en tableau de bits (chaque bits est dans une case du tableau de byte)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="F:Photoshop3000.Barcode.Barcode1D.ValeursGTIN">
            <summary>
            Valeur des digits GTIN, gauche impaire = 0, gauche paire = 1, droite = 2. Pos du byte = valeur
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.Barcode1D.Parité">
            <summary>
            Parité UPC-A et EAN-13 en fonction du 1er digit
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.Barcode1D.ParitéUPCE">
            <summary>
            Parité UPC-E en fonction du dernier puis du 1er digit
            </summary>
        </member>
        <member name="T:Photoshop3000.Barcode.Barcode1D.BarcodeTypes">
            <summary>
            Types de code-barres unidimensionnels valides pour la création et le décodage.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeTypes.StringRepresentation">
            <summary>
            Représentation du type de code barres sous forme d'un string
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeTypes.Null">
            <summary>
            Code barres non valide
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeTypes.EAN13">
            <summary>
            Scan 1D, GTIN-13 ou EAN-13 (European Article Numbering à 13 digits)
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeTypes.UPCA">
            <summary>
            Scan 1D, GTIN-12 ou UPC-A (Universal Product Code à 12 digits)
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeTypes.EAN8">
            <summary>
            Scan 1D, GTIN-8 ou EAN-8 (European Article Numbering à 8 digits)
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeTypes.UPCE">
            <summary>
            Scan 1D, UPC-E (Universal Product Code à 8 digits), convertible en UPC-A
            </summary>
        </member>
        <member name="T:Photoshop3000.Barcode.Barcode1D.BarcodeData">
            <summary>
            Traite et donne accès aux informations contenues dans un code-barres à 1 dimension.
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.Barcode1D.BarcodeData.scanCode">
            <summary>
            Contient le code du produit en entier, systemNumber et checkDigit compris.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeData.EstValide">
            <summary>
            Renvoie la validité du scancode
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeData.IsNumberSystem2Digits">
            <summary>
            Indique si le number system est à 2 ou 3 digits. Peut être à 1 seul digit si UPCA
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeData.FirstDigit">
            <summary>
            Renvoie le premier digit tu code utilisé notamment pour l'encodage et le calcul du check digit.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeData.NumberSystem">
            <summary>
            1, 2 ou 3 digits, représente le pays d'où est commercialisé le produit
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeData.ManufacturerCode">
            <summary>
            Le code lié au producteur qui vend le produit, donné par l'autorité liée au number system
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeData.ProductCode">
            <summary>
            Code du produit donné par le fabriquant.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeData.CheckDigit">
            <summary>
            Check digit
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeData.ScanCode">
            <summary>
            Code en entier du code-barres
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeData.GetScanCodeToEncode">
            <summary>
            Renvoie le code en string qui peut être encodé.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.Barcode1D.BarcodeData.Barcode">
            <summary>
            Type de <see cref="T:Photoshop3000.Barcode.Barcode1D.BarcodeTypes"/> de ce <see cref="T:Photoshop3000.Barcode.Barcode1D"/>
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.BarcodeData.CheckDigitOnly(System.String)">
            <summary>
            Renvoie true si le string entré en paramètre est un nombre positif.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.BarcodeData.ConvertBarcode(Photoshop3000.Barcode.Barcode1D.BarcodeTypes,System.String)">
            <summary>
            Convertit ce <see cref="T:Photoshop3000.Barcode.Barcode1D.BarcodeData"/> sous une autre forme spécifiée. Attention, les transformations sont 
            irreversibles, en cas d'échec il faut manuellement convertir vers l'ancien barcodeType.
            </summary>
            <param name="scannerToConvertTo">Code-barres vers lequel convertir ce <see cref="T:Photoshop3000.Barcode.Barcode1D.BarcodeData"/></param>
            <param name="manufacturerOpt">Code du producteur, nécéssaire si on convertit depuis un EAN8</param>
            <returns>Renvoie <see langword="null"/> si la conversion a réussi, sinon un message d'erreur.</returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.BarcodeData.ConvertToEAN13FromEAN8(System.String)">
            <summary>
            Convertit le scanner EAN8 sous la forme d'un EAN13 à partir du code du producteur. Renvoie un bool indiquant le succès ou non de l'opération.
            </summary>
            <param name="manufacturerCode"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.BarcodeData.ConvertToEAN13FromUPCA">
            <summary>
            Convertit le scanner UPCA sous la forme d'un EAN13. Renvoie un bool indiquant le succès ou non de l'opération.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.BarcodeData.ConvertToUPCAFromEAN13">
            <summary>
            Convertit le scanner EAN13 sous la forme d'un UPCA. Renvoie un bool indiquant le succès ou non de l'opération.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.BarcodeData.ConvertToUPCAFromUPCE">
            <summary>
            Convertit le scanner UPCE sous la forme d'un UPCA. Renvoie un bool indiquant le succès ou non de l'opération.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.BarcodeData.GetUPCAManufactProductFromUPCE">
            <summary>
            Renvoie le code du producteur et le code du produit d'un UPCE
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.BarcodeData.ConvertToUPCEFromUPCA">
            <summary>
            Convertit le scanner UPCA sous la forme d'un UPCE. Renvoie un bool indiquant le succès ou non de l'opération.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.Barcode1D.BarcodeData.ConvertToEAN8FromEAN13">
            <summary>
            Convertit un <see cref="P:Photoshop3000.Barcode.Barcode1D.BarcodeTypes.EAN13"/> sous la forme EAN8. Renvoie un bool indiquant le succès ou non de l'opération.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Photoshop3000.Barcode.Barcode1D.BarcodeData.ConvertUPCaToUPCeFormat">
            <summary>
            4 formats possibles UPCA convertibles en UPCE
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.Barcode1D.BarcodeData.ConvertUPCaToUPCeRange">
            <summary>
            Intervalles de la variable 'X' valides pour les 4 formats UPCA convertibles en UPCE
            </summary>
        </member>
        <member name="T:Photoshop3000.Barcode.DrawQRCode">
            <summary>
            Classe pour dessiner des QR Codes de niveau 1 à 40.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawQRCode.GenerateQRCode(Photoshop3000.Barcode.QRCodeData,System.Int32)">
            <summary>
            Renvoie un <see cref="T:Photoshop3000.Barcode.QRCode"/> dessiné à partir d'un <see cref="T:Photoshop3000.Barcode.QRCodeData"/> et d'un mask à laisser à -1 si on est pas sûr
            </summary>
            <param name="data">Données du QRCode</param>
            <param name="mask">On utilise le mask indiqué ou on choisi le meilleur mask possible</param>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawQRCode.ResetModules(Photoshop3000.Barcode.QRCode)">
            <summary>
            Prend en paramètre un QrCode rempli et met tous les modules de pattern à null.
            </summary>
            <param name="qrCode"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawQRCode.DrawMatrix">
            <summary>
            Dessine la matrice.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawQRCode.PlaceModules">
            <summary>
            Dessine les modèles de modules sur ce qrcode.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawQRCode.PlaceDataAndMask(System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Place les données et ajoute le mask spécifié.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawQRCode.PlaceFinderPattern(System.Int32,System.Int32)">
            <summary>
            Module 7x7
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawQRCode.IsAlignmentPatternPlaceable(System.Int32,System.Int32)">
            <summary>
            Check si on peut placer l'alignment pattern ou non.
            </summary>
            <param name="xCenter"></param>
            <param name="yCenter"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawQRCode.PlaceAlignmentPattern(System.Int32,System.Int32)">
            <summary>
            Module 5x5
            </summary>
            <param name="xCenter"></param>
            <param name="yCenter"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawQRCode.GenerateFormatString(Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel,System.Int32)">
            <summary>
            Génère un string de longueur 15 avec l'erreur et le mask encodés.
            </summary>
            <param name="error">L, M, Q, H</param>
            <param name="mask">0-7</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.DrawQRCode.GenerateVersionString(System.Int32)">
            <summary>
            Génère un string de longueur 18 avec la version encodée.
            </summary>
            <param name="version">1-40</param>
            <returns></returns>
        </member>
        <member name="T:Photoshop3000.Barcode.MaskModèles">
            <summary>
            Masks
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.MaskModèles.GetPenaltyScore(Photoshop3000.Barcode.QRCode)">
            <summary>
            Renvoie le score de pénalité généré par ce QrCode.
            </summary>
            <param name="qrCode"></param>
            <returns></returns>
        </member>
        <member name="T:Photoshop3000.Barcode.QRCode">
            <summary>
            Encapsule une surface de dessin relative à un QR Code.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.QRCode.Data">
            <summary>
            Données de ce qrcode.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.QRCode.Size">
            <summary>
            Taille du qrcode
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.QRCode.Item(System.Int32,System.Int32)">
            <summary>
            <see langword="true"/> : 1 (noir)  | <see langword="false"/> : 0 (blanc)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCode.#ctor(Photoshop3000.Barcode.QRCodeData)">
            <summary>
            Initialise le qrcode avec un <see cref="T:Photoshop3000.Barcode.QRCodeData"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCode.#ctor(System.Int32)">
            <summary>
            Initialise le qrcode en fonction de sa taille. <see cref="P:Photoshop3000.Barcode.QRCode.Data"/> est null.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCode.ToImage(Photoshop3000.MyImage,System.Drawing.Rectangle)">
            <summary>
            Dessine ce qrcode sur l'image entrée en paramètre.
            </summary>
            <param name="imToDraw"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCode.ToImage(Photoshop3000.MyImage,System.Drawing.Rectangle,Photoshop3000.Pixel,Photoshop3000.Pixel,System.Int32)">
            <summary>
            Dessine ce qrcode sur l'image entrée en paramètre.
            </summary>
            <param name="imToDraw"></param>
            <param name="rect"></param>
            <param name="fG"></param>
            <param name="bG"></param>
            <param name="bordureIntérieure"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCode.InitializeMatrix(System.Int32)">
            <summary>
            Initialise la matrice avec une taille donnée.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCode.Reset">
            <summary>
            Met la matrice à null.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCode.SetData(Photoshop3000.Barcode.QRCodeData)">
            <summary>
            Set les données de ce qrcode.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCode.VersionToSize(System.Int32)">
            <summary>
            Convertit une version (1-40) en taille de module.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCode.SizeToVersion(System.Int32)">
            <summary>
            Convertit une taille (en module) en version (1-40)
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel">
            <summary>
            Niveau de correction d'erreur.
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel.L">
            <summary>
            7%
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel.M">
            <summary>
            15%
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel.Q">
            <summary>
            25%
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel.H">
            <summary>
            30%
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel.Boost">
            <summary>
            Boost le niveau de correction choisi tout en gardant la même version que celle choisie.
            </summary>
        </member>
        <member name="T:Photoshop3000.Barcode.QRCode.EncoderMode">
            <summary>
            Mode d'encodage
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.EncoderMode.Numeric">
            <summary>
            Chiffres
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.EncoderMode.AlphaNumeric">
            <summary>
            1 à 9, A à Z et ' '   '$'   '%'   '*'   '+'   '-'   '.'   '/'   ':'
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.EncoderMode.Byte">
            <summary>
            256 premiers char du format utf-8
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.EncoderMode.Kanji">
            <summary>
            Charactères japonais. 
            Implémenté mais problème de format, Impossible de convertir de Unicode -> Shift JIS
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.EncoderMode.Eci">
            <summary>
            Extended channel interpretation
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.QRCode.EncoderMode.Auto">
            <summary>
            Laisser le programme decider quel mode est le plus approprié.
            </summary>
        </member>
        <member name="T:Photoshop3000.Barcode.QRCode.EciMode">
            <summary>
            Mode eci : extended channel interpretation, pas encore totalement fonctionnel.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeHelper.GenerateQRCode(System.String,Photoshop3000.Barcode.QRCode.EncoderMode,Photoshop3000.Barcode.QRCode.EciMode,Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel,System.Int32,System.Int32,System.Drawing.Rectangle,Photoshop3000.Pixel,Photoshop3000.Pixel,System.Int32)">
            <summary>
            Génère un QrCode à partir des paramètres donnés et le dessine dans un <see cref="T:Photoshop3000.MyImage"/>. Ne supporte pas 
            l'optimisation par segmentation des modes d'encodages.
            </summary>
            <param name="message">Message à encoder</param>
            <param name="mode">Mode d'encodage (utiliser <see cref="F:Photoshop3000.Barcode.QRCode.EncoderMode.Auto"/> si on est pas sûr)</param>
            <param name="eci"></param>
            <param name="level">Niveau de correction à utiliser (utiliser '<see cref="F:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel.L"/> | <see cref="F:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel.Boost"/>' si on est pas sûr)</param>
            <param name="version">Version à utiliser (-1 pour la meilleure)</param>
            <param name="mask">Mask à utiliser (-1 pour le meilleur)</param>
            <param name="rect">Taille et forme du qr code</param>
            <param name="fg">Couleur des modules du qr code (noir recommandé)</param>
            <param name="bg">Couleur d'arrière plan (blanc recommandé)</param>
            <param name="bordure">Taille en module des bords entre l'image et le qr code (1 ou 2 recommandées)</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeHelper.GenerateQRCode(System.String,Photoshop3000.Barcode.QRCode.EncoderMode,Photoshop3000.Barcode.QRCode.EciMode,Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel,System.Int32,System.Int32,Photoshop3000.MyImage,System.Drawing.Rectangle,Photoshop3000.Pixel,Photoshop3000.Pixel,System.Int32)">
            <summary>
            Génère un QrCode à partir des paramètres donnés et le dessine dans le <see cref="T:Photoshop3000.MyImage"/> donné.
            </summary>
            <param name="message">Message à encoder</param>
            <param name="mode">Mode d'encodage (utiliser <see cref="F:Photoshop3000.Barcode.QRCode.EncoderMode.Auto"/> si on est pas sûr)</param>
            <param name="eci"></param>
            <param name="level">Niveau de correction à utiliser (utiliser '<see cref="F:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel.L"/> | <see cref="F:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel.Boost"/>' si on est pas sûr)</param>
            <param name="version">Version à utiliser (-1 pour la meilleure)</param>
            <param name="mask">Mask à utiliser (-1 pour le meilleur)</param>
            <param name="image">Image sur laquelle dessiner le qr code</param>
            <param name="rect">Taille et position du qrcode dans l'image</param>
            <param name="fg">Couleur des modules du qr code (noir recommandé)</param>
            <param name="bg">Couleur d'arrière plan (blanc recommandé)</param>
            <param name="bordure">Taille en module des bords entre l'image et le qr code (1 ou 2 recommandées)</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeHelper.ScanQrCode(Photoshop3000.MyImage)">
            <summary>
            Scan une image contenant un QrCode et renvoie le message contenu dans ce QrCode.
            </summary>
            <param name="image">Image à scanner</param>
            <returns></returns>
        </member>
        <member name="T:Photoshop3000.Barcode.QRCodeData">
            <summary>
            Classe pour analyser et traiter les données de QR Codes.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.QRCodeData.Version">
            <summary>
            Version du qrcode. 1-40
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.QRCodeData.Level">
            <summary>
            Niveau de correction.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.QRCodeData.Mode">
            <summary>
            Mode d'encodage des données.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.QRCodeData.Eci">
            <summary>
            Mode eci.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.QRCodeData.CodeQR">
            <summary>
            Qr code encodé.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.QRCodeData.CodeUser">
            <summary>
            Qr code décodé ou code de l'utilisateur
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.#ctor(Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel,System.Int32)">
            <summary>
            Initialise un <see cref="T:Photoshop3000.Barcode.QRCodeData"/> à partir d'un niveau de correction <see cref="T:Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel"/>
            et d'une version. La laisser à -1 si on est pas sûr de la version qu'on veut.
            </summary>
            <param name="level"></param>
            <param name="version"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.Encode(System.String,Photoshop3000.Barcode.QRCode.EncoderMode,Photoshop3000.Barcode.QRCode.EciMode)">
            <summary>
            Transforme un code lisible en code uniquement composé des donnés dessinées sur le qrcode sans les pattern.
            </summary>
            <param name="userCode"></param>
            <param name="mode"></param>
            <param name="eci"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.Decode(System.String)">
            <summary>
            Transforme un code uniquement composé des donnés dessinées sur le qrcode sans les pattern en code lisible.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="qrCode"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.FindBestSuitedMode(System.String)">
            <summary>
            Renvoie le meilleur mode pour encoder ces données.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.TransformStringToMode(System.String)">
            <summary>
            Convertit ce string dans le mode donné.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.SmallestVersion(System.String)">
            <summary>
            Détermine la version la plus petite possible pour encoder ce string alphaNum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.EciActivatedLessCapacity(System.Boolean)">
            <summary>
            Renvoie le nombre de charactère à supprimer en plus si le mode eci est activé.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.GetCharacterCountIndicator(System.Int32)">
            <summary>
            Renvoie la longueur en base 2
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.AddPadBytes(System.String)">
            <summary>
            Ajoute le padding selon l'encodage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.NumericEncoder(System.String)">
            <summary>
            Encode le texte en base2 selon la méthode d'encodage numérique.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.AlphaNumericEncoder(System.String)">
            <summary>
            Encode le texte en base2 selon la méthode des séparations par paires.
            </summary>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.ByteEncoder(System.String)">
            <summary>
            Encode le texte en base2.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.KanjiEncoder(System.String)">
            <summary>
            Encode le texte en base2 selon le mode d'encodage kanji.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.NumericDecoder(System.String)">
            <summary>
            Décode un code numérique
            </summary>
            <param name="code"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.AlphaNumericDecoder(System.String)">
            <summary>
            Décode un code alphanumérique
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.ByteDecoder(System.String)">
            <summary>
            Décode un code en byte mode (8 bit)
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.KanjiDecoder(System.String)">
            <summary>
            Décode un code en kanji mode.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.SetMode(System.String)">
            <summary>
            Initialise le mode d'encodage.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.GetDataLength(System.Int32)">
            <summary>
            Renvoie le nombre de bits associés à cette longueur et au mode d'encodage.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.CreateGroupsString(System.Boolean)">
            <summary>
            Crée un tab de string en fonction de la taille des 2 groupes, du nombre et des tailles des blocks de ces groupes.
            </summary>
            <param name="Level"></param>
            <param name="Version"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.AssembleGroupsString(System.String[][][],System.String)">
            <summary>
            Assemble le tab de string selon la méthode inverse de <see cref="M:Photoshop3000.Barcode.QRCodeData.DisassembleGroupsString(System.String[][][])"/>. Chaque premiers 8 char sont
            mis dans le 1er block puis le 2ème byte est mis dans le 2ème block et ainsi de suite.
            </summary>
            <param name="cw"></param>
            <param name="code"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.DisassembleGroupsString(System.String[][][])">
            <summary>
            Renvoie un désassemblage de ce tab de string selon la méthode inverse de <see cref="M:Photoshop3000.Barcode.QRCodeData.AssembleGroupsString(System.String[][][],System.String)"/>: 1ers de chaque bloc et ainsi de suite.
            </summary>
            <param name="cw"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.StrBase2ToBuff(System.String)">
            <summary>
            Sépare le string par octet et le convertit en tab de byte.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.BuffToStrBase2(System.Byte[])">
            <summary>
            Renvoie le string en base 2.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.Assert(System.Boolean,System.String)">
            <summary>
            Lève une exception si une condition n'est pas vérifiée.
            </summary>
            <param name="condition"></param>
            <param name="error"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.GetDataCodeWordsTotalCount">
            <summary>
            Renvoie le nombre total d'octet des données utilisateurs pour cette version et ce niveau.
            </summary>
            <param name="level"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.GetErrorCWCount">
            <summary>
            Renvoie le nombre de codewords de la correction d'erreur par bloc
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.GetBlockCount(System.Int32)">
            <summary>
            Renvoie le nombre de blocs par groupe.
            </summary>
            <param name="group">0 (1er groupe) ou 1 (2ème groupe)</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.GetDataCWCount(System.Int32)">
            <summary>
            Renvoie le nombre de codewords des données par bloc et par groupe
            </summary>
            <param name="group">0 (1er groupe) ou 1 (2ème groupe)</param>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.GetCapacity(System.Int32,Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel)">
            <summary>
            Renvoie le nombre de charactère encodable maximal pour cette version et ce niveau de correction
            </summary>
            <param name="version"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.QRCodeData.GetModeIndicator(Photoshop3000.Barcode.QRCode.EncoderMode)">
            <summary>
            Renvoie le code à 4 chiffre qui correspond à l'indicateur de mode d'encodage utilisé.
            </summary>
        </member>
        <member name="T:Photoshop3000.Barcode.ScanQRCode">
            <summary>
            Classe pour scanner des QR Codes de niveau 1 à 40.
            </summary>
        </member>
        <member name="F:Photoshop3000.Barcode.ScanQRCode.FindMostOcurrentClr">
            <summary>
            Indique s'il faut prendre en compte la couleur qui revient le plus lors du décodage du QrCode. 
            Peut ajouter un temps non négligeable pour les grosses images (>10M pixels)
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.ScanQRCode.Image">
            <summary>
            Image scannée.
            </summary>
        </member>
        <member name="P:Photoshop3000.Barcode.ScanQRCode.Message">
            <summary>
            Message issu du scan de l'image.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.#ctor(Photoshop3000.MyImage)">
            <summary>
            Scan une image. L'image doit être grande (> 1000) si le niveau du qrcode est > 7.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="qrCode"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.InitializeQrCodeFromImage">
            <summary>
            Initialise le qrcode à partir d'une image contenant un qrcode.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.GetSize(System.Int32,System.Int32@,System.Single@)">
            <summary>
            Renvoie la taille en module de ce QrCode ainsi que la taille d'un module en pixel et la colonne du 1er module.
            </summary>
            <param name="yAxisFirstModule"></param>
            <param name="xAxisFirstModule"></param>
            <param name="sizeMod"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.GetVersion(System.Single,System.Single,System.Single,Photoshop3000.Pixel)">
            <summary>
            Initialise la version de ce QrCode et renvoie la taille en module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.DecodeVersion(System.String)">
            <summary>
            Décode la version encodé, string de longueur 18
            </summary>
            <param name="versionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.FindYAxisFirstModule">
            <summary>
            Renvoie la ligne du 1er module détecté dans l'image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.FillQrCode(System.Int32,System.Int32,System.Single)">
            <summary>
            Rempli le <see cref="T:Photoshop3000.Barcode.QRCode"/> à partir de l'image et de la position du 1er module dans l'image ainsi que de de sa taille.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <param name="sizeMod"></param>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.InitializeQrCodeData">
            <summary>
            Initialise le <see cref="T:Photoshop3000.Barcode.QRCodeData"/> du <see cref="T:Photoshop3000.Barcode.QRCode"/> de cette instance.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.GetEcLAndMask(System.String,System.String,Photoshop3000.Barcode.QRCode.ErrorCorrectionLevel@,System.Int32@)">
            <summary>
            Décode le niveau de correction d'erreur et le mask encodés, de longueur 15.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.DecodeData">
            <summary>
            Décode les données de ce <see cref="T:Photoshop3000.Barcode.QRCode"/> et met le résultat dans <see cref="P:Photoshop3000.Barcode.QRCodeData.CodeUser"/>.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.RemoveMask">
            <summary>
            Elimine le mask.
            </summary>
        </member>
        <member name="M:Photoshop3000.Barcode.ScanQRCode.GetData">
            <summary>
            Renvoie les données sur le QrCode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Photoshop3000.QrCode.MyReedSol.GaloisField">
            <summary>
            Représente un corps fini à 256 éléments
            </summary>
        </member>
        <member name="T:Photoshop3000.Formats">
            <summary>
            Formats compatibles d'écriture/lecture de <see cref="T:Photoshop3000.MyImage"/>. 
            <para/>Fournit des méthodes static valables pour toute la solution.
            </summary>
        </member>
        <member name="M:Photoshop3000.Formats.SerializeObjectToPtr(System.Object)">
            <summary>
            Convertit un objet en tableau d'octet non managé.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.SerializeObjectFromBuffer(System.Object,System.IntPtr)">
            <summary>
            Convertit un objet en tableau de byte et copie les données dans le pointeur donné.
            </summary>
            <param name="obj"></param>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.SerializeObjectFromBuffer(System.Object,System.Byte[],System.Int32)">
            <summary>
            Convertit un objet en tableau de byte et copie les données dans le tableau donné.
            </summary>
            <param name="obj"></param>
            <param name="buffer"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.DeserializeObject(System.IntPtr,System.Type)">
            <summary>
            Convertit un tableau de byte non managé en un object.
            </summary>
            <param name="ptr"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.DeserializeObject(System.Byte[],System.Type,System.Int32)">
            <summary>
            Convertit un tableau de byte en un object.
            </summary>
            <param name="buffer"></param>
            <param name="type"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.KParmiN(System.Int32,System.Int32)">
            <summary>
            Coef binomial
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.LoiBinomiale(System.Int32,System.Int32,System.Double)">
            <summary>
            Calcule la probabilité pour cette loi
            </summary>
            <param name="n">Nombre d'évènements possible</param>
            <param name="k">Le nombre d'évènement pour avoir un succès</param>
            <param name="p">La proba uniforme pour chaque évènement</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.RLE24Decompression(System.Byte[])">
            <summary>
            Décompresse un tableau d'octet selon la méthode rle 24bits et renvoie le nouveau tableau
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.RLE24Compression(System.Byte[])">
            <summary>
            Compresse un tableau d'octet selon la méthode rle 24bits et renvoie le nouveau tableau
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.ReverseLineArray(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Inverse les lignes du tableau, la 1ere ligne devient la derniere, etc...
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.InvertOrderRgbaArray(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Si longueur des tab ordres = 4 : rgba, sinon = 3 : rgb (dans cet ordre tjrs). Echange les composants entre eux selon des ordres définis.
            </summary>
            <param name="data"></param>
            <param name="originalOrderRgba"></param>
            <param name="destOrderRgba"></param>
            <param name="widthIfRgbOnly"></param>
        </member>
        <member name="M:Photoshop3000.Formats.ExtractArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Extrait un tableau de <see cref="T:System.Byte"/> d'un tableau de <see cref="T:System.Byte"/> entre 2 limites
            </summary>
            <param name="data">Tableau de <see cref="T:System.Byte"/></param>
            <param name="début">Index de début</param>
            <param name="fin">Index de fin (non inclus)</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.ConvertIntToLittleEndian(System.Int32)">
            <summary>
            Convertit un <see cref="T:System.Int32"/> en un tableau de <see cref="T:System.Byte"/> au format little endian
            </summary>
            <param name="value">Valeur à convertir</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.ConvertLittleEndianToInt(System.Byte[])">
            <summary>
            Convertit un tableau de <see cref="T:System.Byte"/> au format little endian en <see cref="T:System.Int32"/>
            </summary>
            <param name="bytes">Tableau de <see cref="T:System.Byte"/></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.ConvertIntToBigEndian(System.Int32)">
            <summary>
            Convertit un <see cref="T:System.Int32"/> en un tableau de <see cref="T:System.Byte"/> au format big endian
            </summary>
            <param name="value">Valeur à convertir</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.ConvertBigEndianToInt(System.Byte[])">
            <summary>
            Convertit un tableau de <see cref="T:System.Byte"/> au format little endian en <see cref="T:System.Int32"/>
            </summary>
            <param name="bytes">Tableau de <see cref="T:System.Byte"/></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.GetIntersectionWithImage(System.Drawing.Rectangle,System.Drawing.Size,System.Int32)">
            <summary>
            Renvoie le <see cref="T:System.Drawing.Rectangle"/> correspondant à l'intersection avec un <see cref="T:System.Drawing.Size"/>.
            </summary>
            <param name="rect"></param>
            <param name="sizeImage"></param>
            <param name="inflateRect"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.GetRectangleRightWay(System.Drawing.Rectangle)">
            <summary>
            Renvoie le <see cref="T:System.Drawing.Rectangle"/> à l'endroit (avec un Width et Height > 0)
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.GetPaddingPixel(System.Int32,System.Int32)">
            <summary>
            Renvoie le nombre d'octets qui composent le padding de fin de ligne en fonction d'une largeur en nombre de pixels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.SafeMemCpy(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Copie le nombre d'éléments indiqué d'une adresse mémoire vers une autre. (kernel32)
            </summary>
            <param name="dest"></param>
            <param name="src"></param>
            <param name="len">Représente le nombre d'octets à déplacer, si on déplace des int : 1 nombre = 4 de longueur</param>
        </member>
        <member name="M:Photoshop3000.Formats.ValToStrBase2(System.Int32,System.Int32)">
            <summary>
            Convertit la valeur en str base2.
            </summary>
            <param name="val"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.GetDescription``1(``0)">
            <summary>
            Renvoie le destription attribut de cet enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.IsDefined(System.Enum)">
            <summary>
            Détermine si ce <see cref="T:System.Enum"/> est valide ou non.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.ToSystemPixelFormat(Photoshop3000.Formats.PixelFormat)">
            <summary>
            Renvoie le <see cref="T:System.Drawing.Imaging.PixelFormat"/> équivalent de cet enum.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.GetPixelLength(Photoshop3000.Formats.PixelFormat)">
            <summary>
            Renvoie la longueur en octets d'un pixel associé à ce format.
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.ToSystemImageFormat(Photoshop3000.Formats.ImageFormat)">
            <summary>
            Renvoie le <see cref="T:System.Drawing.Imaging.ImageFormat"/> associé à ce ImageFormat.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.GetFilenameWithCorrectExtension(System.String,Photoshop3000.Formats.ImageFormat)">
            <summary>
            Récupère un chemin et l'extension <see cref="T:Photoshop3000.Formats.ImageFormat"/> qui va avec et renvoie la chaine du chemin avec l'extension correcte
            </summary>
            <param name="filename">Chemin jusqu'au fichier</param>
            <param name="ext">Extension à ajouter au chemin</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Formats.GetExtension(System.String,System.Boolean)">
            <summary>
            Récupère l'extension sur le chemin d'un fichier
            </summary>
            <param name="filename"></param>
            <param name="chargement">Si on charge une image et que l'extension n'est pas précisée, on regarde dans le dossier de sauvegarde quelle image pourrait correspondre</param>
            <returns></returns>
        </member>
        <member name="T:Photoshop3000.Formats.ImageFormat">
            <summary>
            Différents types d'extension d'images supportées pour le chargement et la sauvegarde.
            </summary>
        </member>
        <member name="F:Photoshop3000.Formats.ImageFormat.BMP">
            <summary>
            Format Bitmap (.bmp) à 24 BPP (rgb) ou 32 BPP (argb).
            </summary>
        </member>
        <member name="F:Photoshop3000.Formats.ImageFormat.CSV">
            <summary>
            Format d'image bitmap sous format .csv (comma-separated values) -> lisible par Excel 
            </summary>
        </member>
        <member name="F:Photoshop3000.Formats.ImageFormat.JPEG">
            <summary>
            Format de sauvegarde JPEG (.jpg). Algorithmie gérée par windows
            </summary>
        </member>
        <member name="F:Photoshop3000.Formats.ImageFormat.PNG">
            <summary>
            Format de sauvegarde PNG. Algorithmie gérée par windows
            </summary>
        </member>
        <member name="T:Photoshop3000.Formats.PixelFormat">
            <summary>
            Formats de pixels disponibles (avec transparence ou non pour l'instant)
            </summary>
        </member>
        <member name="F:Photoshop3000.Formats.PixelFormat.BMP_Rgb24">
            <summary>
            RGB
            </summary>
        </member>
        <member name="F:Photoshop3000.Formats.PixelFormat.BMP_Argb32">
            <summary>
            ARGB : Autorise la transparence
            </summary>
        </member>
        <member name="T:Photoshop3000.BITMAPHEADER">
            <summary>
            Header et header info d'un bitmap. Toutes les données sont en little endian.
            </summary>
        </member>
        <member name="T:Photoshop3000.BITMAPHEADER_32">
            <summary>
            Suite d'un <see cref="T:Photoshop3000.BITMAPHEADER"/> pour les images 32bpp. Les données en big endian sont précisées de la mention 'be'.
            </summary>
        </member>
        <member name="T:Photoshop3000.BITMAPCONST">
            <summary>
            Constantes faisant référence aux index et valeurs des différentes infos dans un fichier .bmp
            </summary>
        </member>
        <member name="F:Photoshop3000.BITMAPCONST.MIN_HEIGHT">
            <summary>
            Hauteur de l'image minimale supportée.
            </summary>
        </member>
        <member name="F:Photoshop3000.BITMAPCONST.MIN_WIDTH">
            <summary>
            Largeur de l'image minimale supportée.
            </summary>
        </member>
        <member name="T:Photoshop3000.MyImageSaveFormat">
            <summary>
            Classe pour préciser le format de sauvegarde d'un MyImage.
            </summary>
        </member>
        <member name="P:Photoshop3000.MyImageSaveFormat.ImageFormat">
            <summary>
            Format avec lequel sauvegarder l'image. Prioritaire sur le format de pixel.
            </summary>
        </member>
        <member name="P:Photoshop3000.MyImageSaveFormat.PixelFormat">
            <summary>
            Format de pixel dans lequel sauvegarder les données. 2ème dans l'ordre de priorité.
            </summary>
        </member>
        <member name="P:Photoshop3000.MyImageSaveFormat.Compression_bmp_24bpp">
            <summary>
            Uniquement destiné aux images .bmp 24bpp.
            </summary>
        </member>
        <member name="P:Photoshop3000.MyImageSaveFormat.IsCompressionPossible">
            <summary>
            Indique s'il faut compresser l'image ou non.
            </summary>
        </member>
        <member name="F:Photoshop3000.GUI.GUI_Annexes.BarcodeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.GUI.GUI_Annexes.BarcodeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.GUI.GUI_Annexes.BarcodeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Photoshop3000.GUI.GUI_Annexes.JuliaForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.GUI.GUI_Annexes.JuliaForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.GUI.GUI_Annexes.JuliaForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Photoshop3000.CopieImageForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.CopieImageForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.CopieImageForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Photoshop3000.CouleurFiltre.userListBoxChange">
            <summary>
            Indique si c'est bien l'utilisateur qui a changé les index
            </summary>
        </member>
        <member name="F:Photoshop3000.CouleurFiltre.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.CouleurFiltre.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.CouleurFiltre.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Photoshop3000.Dessin.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.Dessin.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.Dessin.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Photoshop3000.Décalage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.Décalage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.Décalage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Photoshop3000.FractaleForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.FractaleForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.FractaleForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Photoshop3000.Histogramme.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.Histogramme.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.Histogramme.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Photoshop3000.ModifImage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.ModifImage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.ModifImage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Photoshop3000.MainWindow">
            <summary>
            Form principal de l'application
            </summary>
        </member>
        <member name="F:Photoshop3000.MainWindow.imageChargée">
            <summary>
            Indique si au moins une image est affichée ou chargée.
            </summary>
        </member>
        <member name="F:Photoshop3000.MainWindow.tailleRéelleAffichée">
            <summary>
            Indique si les images sont affichées avec leur taille réelle.
            </summary>
        </member>
        <member name="F:Photoshop3000.MainWindow.modeNuitActivé">
            <summary>
            Indique si le mode nuit de l'application est activé .
            </summary>
        </member>
        <member name="F:Photoshop3000.MainWindow.currentIndexOnglet">
            <summary>
            Représente l'onglet dans lequel l'utilisateur se situe
            </summary>
        </member>
        <member name="M:Photoshop3000.MainWindow.#ctor">
            <summary>
            Fenetre principale.
            </summary>
        </member>
        <member name="M:Photoshop3000.MainWindow.AddTabPage(Photoshop3000.MyImage)">
            <summary>
            Ajoute un onglet avec l'image spécifiée
            </summary>
            <param name="imageToAdd">Image à ajouter</param>
        </member>
        <member name="M:Photoshop3000.MainWindow.ClearEverything(System.String)">
            <summary>
            Supprime tous les onglets en cours et renvoie un <see cref="T:System.Windows.Forms.DialogResult"/> indiquant si l'opération a bien été effectuée ou non
            </summary>
            <param name="MessageErreur"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MainWindow.ImageHelper(System.Boolean)">
            <summary>
            Ajoute du texte pour indiquer à l'utilisateur que faire
            </summary>
            <returns></returns>
        </member>
        <member name="F:Photoshop3000.MainWindow.components">
            <summary>
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:Photoshop3000.MainWindow.Dispose(System.Boolean)">
            <summary>
            Nettoyage des ressources utilisées.
            </summary>
            <param name="disposing">true si les ressources managées doivent être supprimées ; sinon, false.</param>
        </member>
        <member name="M:Photoshop3000.MainWindow.InitializeComponent">
            <summary>
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="T:Photoshop3000.MyPictureBox">
            <summary>
            Zone destinée à afficher une image, peut prendre en paramètre un <see cref="T:Photoshop3000.MyImage"/>.
            </summary>
        </member>
        <member name="M:Photoshop3000.MyPictureBox.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.MyPictureBox"/>.
            </summary>
        </member>
        <member name="M:Photoshop3000.MyPictureBox.#ctor(Photoshop3000.MyImage)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.MyPictureBox"/> à partir d'un <see cref="T:Photoshop3000.MyImage"/>.
            </summary>
        </member>
        <member name="P:Photoshop3000.MyPictureBox.MyImage">
            <summary>
            Obtient ou définit l'<see cref="T:System.Drawing.Image"/> de cet objet sous forme d'un <see cref="T:Photoshop3000.MyImage"/>
            </summary>
        </member>
        <member name="T:Photoshop3000.MyTextBox">
            <summary>
            TexteBox transparente
            </summary>
        </member>
        <member name="T:Photoshop3000.InterpolationMode">
            <summary>
            Spécifie les méthodes d'interpolation utilisées pour la mise à l'échelle et la rotation d'un <see cref="T:Photoshop3000.MyImage"/>.
            <para/>Les méthodes d'interpolation dont les algorithmes sont ceux de GDI+ sont précisées de la mention "Windows_".
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.NearestNeighbour">
            <summary>
            Interpolation par le voisin le plus proche. Avantage : aucune perte d'information lorsqu'on augmente la taille, rapide à process. Peut prendre en compte la transparence.
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.Bilineaire">
            <summary>
            On réalise une moyenne des pixels les plus proche (4) du pixel d'arrivée en fonction de leur distance à celui-ci. 
            Avantage : précis, résultat plus proche de ce qui est attendu en général lorsqu'on redimensionne une image. Peut prendre en compte la transparence.
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.Bicubique">
            <summary>
            Interpolation bicubique, prend en compte les 16 pixels les plus proches. Plus précis que l'interpolation bilinéaire. Peut prendre en compte la transparence.
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.Bilineaire_BordsAccentuésStyle1">
            <summary>
            Comme bilineaire sauf que les bords sont accentués pour avoir plus d'importance, sont de la couleur du <see cref="P:Photoshop3000.MyGraphics.PixelRemplissage"/>
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.Bilineaire_BordsAccentuésStyle2">
            <summary>
            Comme bilineaire sauf que les bords sont accentués pour avoir plus d'importance, sont de la couleur du pixel le plus proche
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.Bicubique_BordsAccentués">
            <summary>
            Interpolation bicubique mais les couleurs sur les bords sont accentuées.
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.Windows_Bilinear">
            <summary>
            Interpolation bilinéaire, algorithmie gérée par gdi+.
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.Windows_Bicubic">
            <summary>
            Interpolation bicubique, algorithmie gérée par gdi+.
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.Windows_NearestNeighbour">
            <summary>
            Interpolation par le voisin le plus proche, algorithmie gérée par gdi+.
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.Windows_HighQualityBilinear">
            <summary>
            Interpolation bilinéaire de haute qualité, algorithmie gérée par gdi+.
            </summary>
        </member>
        <member name="F:Photoshop3000.InterpolationMode.Windows_HighQualityBicubic">
            <summary>
            Interpolation bicubique de haute qualité, algorithmie gérée par gdi+.
            </summary>
        </member>
        <member name="T:Photoshop3000.MyGraphics">
            <summary>
            Fournit des méthodes pour modifier un <see cref="T:Photoshop3000.MyImage"/>. Les changements sont effectués directement sur l'instance du <see cref="T:Photoshop3000.MyImage"/> entré en paramètre.
            <para/>Les méthodes qui demandent des objets référencés (autres qu'une struct) utiliseront toujours des copies de ceux-ci.
            </summary>
        </member>
        <member name="P:Photoshop3000.MyGraphics.Rand">
            <summary>
            Instance <see cref="T:System.Random"/> initialisée à partir d'un seed ne dépendant pas uniquement du temps, unique (guid).
            </summary>
        </member>
        <member name="P:Photoshop3000.MyGraphics.MyImage">
            <summary>
            Récupère le <see cref="T:Photoshop3000.MyImage"/> de ce <see cref="T:Photoshop3000.MyGraphics"/>, la même instance que celle utilisée pour créer ce <see cref="T:Photoshop3000.MyGraphics"/>.
            </summary>
        </member>
        <member name="P:Photoshop3000.MyGraphics.InterpolationMode">
            <summary>
            Spécifie le mode d'interpolation <see cref="T:Photoshop3000.InterpolationMode"/> de ce <see cref="T:Photoshop3000.MyGraphics"/>
            </summary>
        </member>
        <member name="P:Photoshop3000.MyGraphics.KeepAspectRatio">
            <summary>
            Lors d'un changement de taille de l'image, contrôle le respect ou non du ratio Hauteur/Largeur de l'image d'origine. Les bords vides sont alors remplis par <see cref="P:Photoshop3000.MyGraphics.PixelRemplissage"/><para/>
            Lors d'une rotation de l'image, contrôle le respect de la taille de l'image d'origine. <para/>
            Lors d'une pixélisation d'une image, adapte ou non la taille d'un nouveau pixel pour que les bords n'aient pas de "petits" pixels
            </summary>
        </member>
        <member name="P:Photoshop3000.MyGraphics.PixelRemplissage">
            <summary>
            Pixel qui occasionnellement remplira les trous laissés dans une image.
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.#ctor(Photoshop3000.MyImage)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.MyGraphics"/>. Réalise des opérations sur l'instance du <see cref="T:Photoshop3000.MyImage"/> entré en paramètre
            </summary>Instance sur laquelle les opérations sont effectuées
            <param name="image">Image sur laquelle réaliser des opérations</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.ReplaceImage(Photoshop3000.MyImage)">
            <summary>
            Clone les pixels d'un <see cref="T:Photoshop3000.MyImage"/> dans le <see cref="T:Photoshop3000.MyImage"/> de cette instance.
            </summary>
            <param name="toClone"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.ReversePixelsLine(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inverse une ligne de pixels. Ne fonctionne uniquement que pour des pixels de longueur 3 ou 4.
            </summary>
            <param name="line"></param>
            <param name="lengthPixel"></param>
            <param name="padding"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.ReversePixelsLine(System.Byte*,System.Int32,System.Int32)">
            <summary>
            Inverse une ligne de pixels à partir d'un pointeur. Fonctionne uniquement pour des pixels de longueur 3 ou 4.
            </summary>
            <param name="dataBuffer"></param>
            <param name="lengthPixel"></param>
            <param name="lengthData"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.CopyLines(System.Byte*,System.Byte*,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copie un certain nombre de lignes de données à la longueur indiquée entre 2 pointeurs.
            </summary>
            <param name="dest"></param>
            <param name="src"></param>
            <param name="copyLength">Nombre de bytes</param>
            <param name="height"></param>
            <param name="strideDestIncr"></param>
            <param name="strideSrcIncr"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.Rotation(System.Double,System.Boolean)">
            <summary>
            Tourne le <see cref="T:Photoshop3000.MyImage"/> avec l'angle en degré spécifié et le mode d'interpolation prédéfini. 
            <para/>La taille de l'image est adaptée ou non selon <see cref="P:Photoshop3000.MyGraphics.KeepAspectRatio"/>.<para/>
            La couleur des bords est définie par <see cref="P:Photoshop3000.MyGraphics.PixelRemplissage"/>.
            </summary>
            <param name="degré">Angle de rotation en degré, sens inverse du sens trigo</param>
            <param name="bordsCouleurIm">Gère la couleur des trous laissés par l'image. <see langword="false"/> = remplissage par <see cref="P:Photoshop3000.MyGraphics.PixelRemplissage"/>.
            Sinon remplissage par la couleur des bords de l'image (sauf si interpolation windows ou bicubique).</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.Redimensionnement(System.Double)">
            <summary>
            Adapte l'image en fonction d'un rapport d'aggrandissement ou de rétrécissement. Avec 1, la taille de l'image de base.
            </summary>
            <param name="rapport">Rapport de changement de la taille d'une image avec 1 la taille actuelle de l'image</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.Redimensionnement(System.Int32,System.Int32)">
            <summary>
            Adapte l'image en fonction de nouveaux paramètres de hauteur et de largeur.
            </summary>
            <param name="targetHeight">Nouvelle taille de l'image en hauteur</param>
            <param name="targetWidth">Nouvelle taille de l'image en largeur</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.InternalRedimensionnement(Photoshop3000.MyImage)">
            <summary>
            Dessine l'image de ce MyGraphics dans l'image entrée en paramètre de manière à remplir tout l'espace disponible.
            </summary>
            <param name="imageÀRemplir"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.GetPixelInterpolé(System.Double,System.Double)">
            <summary>
            Crée un pixel argb en fonction d'une position dans le <see cref="T:Photoshop3000.MyImage"/> de cette instance et d'une méthode <see cref="T:Photoshop3000.InterpolationMode"/>
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyGraphics.GetInterpolationBicubique(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Renvoie la solution de f(t) avec t compris entre 0 et 1. Les autres paramètres sont les positions en x ou y des pixels à interpoler de gauche à droite. Basé sur le polynôme d'Hermite
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <param name="D"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyGraphics.VoisinsBicubique(System.Double,System.Double)">
            <summary>
            Renvoie les 16 voisins les plus proches du point entré en paramètre
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyGraphics.GetInterpolationBilineaire(System.Double,System.Double)">
            <summary>
            Renvoie le <see cref="T:Photoshop3000.Pixel"/> moyen déterminé en fonction de la distance des <see cref="T:Photoshop3000.Pixel"/> de la <see cref="T:System.Collections.Generic.List`1"/> par rapport à un <see cref="T:Photoshop3000.Point"/> d'origine
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyGraphics.GetInterpolationBilineaireBords(System.Double,System.Double)">
            <summary>
            Equivalent de l'interpolation bilinéaire de Windows, les bords sont plus accentués, moins opti
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyGraphics.Rotation_Windows(Photoshop3000.MyImage,System.Double,System.Boolean,System.Boolean,Photoshop3000.InterpolationMode,Photoshop3000.Pixel)">
            <summary>
            Applique une rotation à une image, algorithmie gérée par GDI+
            </summary>
            <param name="myImage"></param>
            <param name="angle"></param>
            <param name="adjustSize"></param>
            <param name="couperBords"></param>
            <param name="mode"></param>
            <param name="backPixel"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyGraphics.Redimensionnement_Windows(Photoshop3000.MyImage,System.Int32,System.Int32,Photoshop3000.InterpolationMode)">
            <summary>
            Applique une mise à l'échelle à une image, algorithmie gérée par GDI+
            </summary>
            <param name="myImage"></param>
            <param name="targetHeight"></param>
            <param name="targetWidth"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyGraphics.Rognage(System.Drawing.Rectangle)">
            <summary>
            Effectue un rognage dans l'image entre les coordonnées spécifiées. N'aggrandie pas la nouvelle image
            </summary>
            <param name="rect">Rectangle</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.GetRognage(System.Drawing.Rectangle)">
            <summary>
            Renvoie un rognage de l'image entre les coordonnées spécifiées
            </summary>
            <param name="rect">Rectangle</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.InternalRognage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rogne une image avec des nouvelles dimensions.
            </summary>
            <param name="startW"></param>
            <param name="startH"></param>
            <param name="endW"></param>
            <param name="endH"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.InversionCouleurs">
            <summary>
            Inverse les couleurs des pixels d'un <see cref="T:Photoshop3000.MyImage"/>
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.TransformationGris">
            <summary>
            Transforme une image en nuance de gris
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.TransformationNoirEtBlanc(System.Int32)">
            <summary>
            Transforme les pixels d'un <see cref="T:Photoshop3000.MyImage"/> en des nuances de gris, de noir et de blanc en fonction d'un facteur %. <para/>100% revient à changer la photo qu'en noir et qu'en blanc, 0 revient à mettre la photo en nuance de gris normalement
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.TransformationSépia">
            <summary>
            Transforme une image en sépia
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.TransformationLuminositéPerçue(System.Int32)">
            <summary>
            Modifie la luminosité de l'image en fonction d'un facteur pourcentage : 50 = luminosité actuelle, 100 = tout blanc, 0 = tout noir
            </summary>
            <param name="brightnessPourcentage"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.TransformationCouleurIntensité(System.Int32)">
            <summary>
            Atténue les couleurs d'une image
            </summary>
            <param name="couleurChgmtIntensité">Pourcentage d'atténuation (0% = noir et blanc, 100% = couleurs normales)</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.TransformationFiltreRGB(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Transforme l'image en ne retenant que les composants RGB sélectionnés
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.TransformationFiltreCouleur(Photoshop3000.Pixel)">
            <summary>
            Applique un filtre de la couleur spécifiée à l'image.
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.TransformationGriserRGB(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ne retient que les composants sélectionnés à partir d'une certaine intensité (0-255) et grise toutes les autres 
            parties de l'image où l'intensité est en dessous. Mettre à 0 revient à ignorer un composant.
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.TrierParCouleurCoté(System.Int32)">
            <summary>
            Trie les couleurs de l'image de la plus utilisée à la moins utilisée. Prend en compte la transparence.
            </summary>
            <param name="coté">1 = haut bas, 2 = droite gauche, 3 = bas haut, 4 = gauche droite</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.TrierParCouleurCoin(System.Int32,System.Int32)">
            <summary>
            Trie les couleurs de l'image de la plus utilisée à la moins utilisée. Prend en compte la transparence.
            </summary>
            <param name="coin">1 = haut gauche, 2 = haut droite, 3 = bas gauche, 4 = bas droite</param>
            <param name="orderByAscending">Manière dont le dico est trié. 0 : aléatoirement, 1 : grand -> petit,
            2 : petit -> grand</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.ModifyComponentValue(System.Int32,System.Int32)">
            <summary>
            Modifie toutes les valeurs du composant sélectionné avec la valeur indiquée.
            </summary>
            <param name="indexComponent"> b = 0 | g = 1 | r = 2 | a =? 3</param>
            <param name="value">0-255</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.SwapComponents(System.Byte[])">
            <summary>
            Intervertit les couleurs (au format argb) en un nouveau format selon un tableau de byte avec le nouvel ordre pour les
            composants. <para/>
            Exemple : actuellement {b, g, r, a} = {1, 2, 3, 4}.  Si { 3, 2, 1, 4 } est entré en paramètre alors
            { b, g, r, a } => {r, g, b, a} (le rouge et le bleu sont intervertis, l'alpha et le vert restent inchangés).
            Exemple 2 : si { 2, 2, 2, 1 } , { b, g, r, a } devient { g, g, g, b }
            <para/>La longueur du tableau doit etre de 3 ou 4, la 4ème composante sera ignorée ou rajoutée si le format pivot
            est 24 ou 32 bpp.
            <para/>Le tableau doit exclusivement être composé de chiffres entre 1 et 3/4 (en fonction de la longueur de celui-ci).
            </summary>
            <param name="newOrderRgba"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.Remplissage(Photoshop3000.Pixel)">
            <summary>
            Efface la surface de l'image et la remplit avec le <see cref="T:Photoshop3000.Pixel"/> spécifié
            </summary>
            <param name="color">Pixel</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.EffetMiroir(System.Boolean)">
            <summary>
            Inverse les pixels de droite à gauche d'un <see cref="T:Photoshop3000.MyImage"/> par rapport au milieu
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.EffetMiroirDoubleOuQuadruple(System.Boolean,System.Boolean)">
            <summary>
            L'image de l'instance est ajoutée à côté d'elle même et/ou sous elle de manière symétrique.
            </summary>
            <param name="effetLargeur">L'image est démultipliée en largeur</param>
            <param name="effetHauteur">L'image est démultipliée en hauteur</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.EffetMiroirMoitié(System.Boolean)">
            <summary>
            La moitié de l'image est dédoublée soit en largeur soit en hauteur
            </summary>
            <param name="hauteur"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreDetectionContours">
            <summary>
            Filtre de Sobel pour détecter les contours
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreSobel">
            <summary>
            Transforme une image pour détecter les contours avec la méthode de Sobel (gris -> flou -> filtre mat verticale + filtre mat horizontale -> somme)
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreCanny(System.Int32,System.Int32)">
            <summary>
            Transforme une image avec le filtre de detection de contour avec la méthode de Canny
            </summary>
            <param name="intensitéMax">Intensité de pixel (0-255) à partir de laquelle on est sur qu'un pixel fait parti d'une ligne de contour</param>
            <param name="intensitéMin">Intensité de pixel (0-255) en dessous de laquelle on est sur qu'un pixel ne fait pas parti d'une ligne de contour</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreRenforcementContours">
            <summary>
            Filtre de renforcement des bords
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreAffaiblissementContours">
            <summary>
            Filtre d'affaiblissement des bords
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreDessin(System.Boolean)">
            <summary>
            Transforme une image en un dessin, les couleurs de l'image peuvent être inversées pour se rapprocher du résultat attendu 
            (paysage entre autres, à éviter sur les portraits). <para/>Ajouter du bruit peut également améliorer le résultat.
            </summary>
            <param name="inversion">Inversion des couleurs de l'image ou non</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreGravure">
            <summary>
            Transforme une image en son équivalent en style gravure
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreRepoussageFaible">
            <summary>
            Transforme une image avec le filtre de repoussage faible
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreRepoussageFort">
            <summary>
            Transforme une image avec le filtre de repoussage fort
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreAiguisage">
            <summary>
            Aiguise une image
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreContraste">
            <summary>
            Augmente le contraste d'une image
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreFlou(System.Boolean)">
            <summary>
            Rend une image floue (flou de mouvement)
            </summary>
            <param name="flouDeMouvement">Filtre de mouvement ou filtre normal</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreFlouGaussien">
            <summary>
            Rend une image floue (flou Gaussien)
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreLissage">
            <summary>
            Filtre de lissage
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FiltreTest">
            <summary>
            Test
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.Pixellisation(System.Double)">
            <summary>
            Rend une <see cref="T:Photoshop3000.MyImage"/> pixélisée à partir de la taille d'un nouveau gros Pixel défini par rapport à la largeur de l'image. Dans un gros pixel, tous les petits pixels ont la même couleur.<para/>
            100% revient à pixéliser une image avec un nouveau pixel de la taille maximale en largeur.
            </summary>
            <param name="rapport"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.Pixellisation(System.Int32)">
            <summary>
            Rend une <see cref="T:Photoshop3000.MyImage"/> pixélisée à partir d'une taille d'un nouveau gros Pixel. Dans un gros pixel, tous les petits pixels ont la même couleur. <para/>
            Si <see cref="P:Photoshop3000.MyGraphics.KeepAspectRatio"/> est set à <see langword="true"/> les gros pixels auront tous les même taille. <para/>
            Si <see langword="false"/> les gros pixels auront la taille indiquée, certains pourraient donc être plus petits sur les bords de l'image
            </summary>
            <param name="taillePixel">Taille d'un gros pixel avec 1 la taille d'un pixel d'origine</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DécalagePixelsSinCos(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Décale tous les pixels d'une image en fonction de la fonction sinus ou cosinus, en hauteur ou en largeur
            </summary>
            <param name="intensitéPeriodes">Intensité des décalages en hauteur (les valeurs basses sont préférables)</param>
            <param name="nombrePeriodes">Nombre de décalage periodiques sur toute l'image</param>
            <param name="cos"><see langword="true"/> = cosinus, sinon on utilise le sinus (ça change juste le décalage horizontale d'1/2 periode finalement)</param>
            <param name="largeur"><see langword="true"/> = décalage en largeur, sinon en hauteur</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DécalagePixels(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Décale tous les pixels d'une image dans le sens de la largeur ou de la hauteur selon une intensité de décalage et une largeur des décalages 
            </summary>
            <param name="intensitéPourcentage"></param>
            <param name="largeurLigne"></param>
            <param name="largeur"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DécalageCercle">
            <summary>
            Décale tous les pixels d'une image selon des cercles concentriques
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.AddNoise(System.Int32)">
            <summary>
            Ajoute du bruit coloré à une <see cref="T:Photoshop3000.MyImage"/>
            </summary>
            <param name="quantité">Montant à ajouter ou à enlever à chaque pixel</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.AddPepperNoise(System.Int32)">
            <summary>
            Ajoute du bruit de type "sel et poivre" à une <see cref="T:Photoshop3000.MyImage"/>
            </summary>
            <param name="pourcentage">pourcentage de pixels rendus blancs ou noirs</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.AddShotNoise(System.Int32)">
            <summary>
            Ajoute du bruit de Grenaille à une <see cref="T:Photoshop3000.MyImage"/>
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.InternalAddNoise(System.Boolean,System.Int32)">
            <summary>
            Note : On ne teste pas si le pixel a déjà été changé pour accélérer le processus
            </summary>
            <param name="blackOnly"></param>
            <param name="pourcentage"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.CacherImage(Photoshop3000.MyImage,System.Int32)">
            <summary>
            Cache un <see cref="T:Photoshop3000.MyImage"/> dans le <see cref="T:Photoshop3000.MyImage"/> de cette instance à partir d'un nombre de bits à cacher dans les bits les moins importants de l'image visible.<para/>
            L'image à cacher l'est au centre de l'image visible, si elle est plus grande que l'image visible alors ses bords sont rognés pour rentrer dans l'image visible en largeur ou en hauteur<para/>
            </summary>
            <param name="imageToHide">Image à cacher</param>
            <param name="nbBitsToHide">Nombre de bits à cacher</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.GetImageCachée(System.Int32)">
            <summary>
            Trouve une image cachée dans une image
            </summary>
            <param name="nbBitsHidden">Nombre de bits de décallage</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyGraphics.CacherTexte(System.String,System.String,System.Int32)">
            <summary>
            Cache du texte au format 8 bits (256 premiers chars du format UTF-8) dans les bits les moins importants d'une copie d'une image et renvoie le résultat. <para/>
            Les pixels sont choisis pseudo-aléatoirement à partir d'un mot de passe. Les charactères ne faisant pas parti du format 8 bits sont ignorés. <para/>
            Ne pas utiliser la même image pour cacher 2 textes car l'un pourrait empiéter sur l'autre et corrompre certaines parties du texte. <para/>
            La longueur du texte par rapport à la taille de l'image n'influe pas sur le temps de calcul
            </summary>
            <param name="txt">Le texte à cacher au format 8 bits. Si la longueur du texte sera inconnue lors du décodage, le terminer par \u0003 </param>
            <param name="mdp">Mot de passe pour retrouver le texte par la suite. Pas de format particulier à respecter</param>
            <param name="nbreBitsCachés">Nombre de bits sur lesquels cacher le texte sur une couleur (rgb) d'un pixel. 1, 2, 4 ou 8</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyGraphics.GetTexteCaché(System.String,System.Int32,System.Int32)">
            <summary>
            Récupère un texte caché dans un <see cref="T:Photoshop3000.MyImage"/> à partir d'un mot de passe et de la longueur du texte à trouver (pas obligé mais le texte doit alors finir par \u0003 pour signifier la fin).
            </summary>
            <param name="mdp">Mot de passe</param>
            <param name="tailleMessage">Taille du message à retrouver. Si inconnue, mettre à 0, la longueur de texte maximale cherchée sera alors de 10 000 char. Le texte renvoyé s'arrête alors au char 'u\0003' ou jusqu'à la taille max</param>
            <param name="nbreBitsCachés">Nombre de bits utilisés pour cacher le message. 1, 2, 4 ou 8</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyGraphics.EffetPeinture(System.Boolean,System.Boolean)">
            <summary>
            Méthode qui intensifie les couleurs principales d'une image, donne un peu un effet peinture
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.EffetPeintureHuile(System.Int32,System.Single)">
            <summary>
            Applique un effet 'peinture à l'huile' à l'image
            </summary>
            <param name="rayon"></param>
            <param name="intensité"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.EffetPeintureHuileContraste(System.Int32,System.Single)">
            <summary>
            Applique un effet 'peinture à l'huile' à l'image
            </summary>
            <param name="rayon"></param>
            <param name="intensité"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawImage(Photoshop3000.MyImage,System.Int32)">
            <summary>
            Copie un <see cref="T:Photoshop3000.MyImage"/> au milieu du <see cref="T:Photoshop3000.MyImage"/> de ce <see cref="T:Photoshop3000.MyGraphics"/>.
            </summary>
            <param name="imagePremierPlan">Image</param>
            <param name="opacité">Opacité de l'image à copier, -1 pour utiliser le canal alpha de l'image à copier</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawImage(Photoshop3000.MyImage,Photoshop3000.Point,System.Int32)">
            <summary>
            Copie un <see cref="T:Photoshop3000.MyImage"/> sur le <see cref="T:Photoshop3000.MyImage"/> de ce <see cref="T:Photoshop3000.MyGraphics"/> à partir d'un <see cref="T:Photoshop3000.Point"/> et d'une opacité spécifiés.
            Le paramètre alpha de l'image est ignoré, mettre l'opacité à -1 pour l'utiliser.
            </summary>
            <param name="imagePremierPlan">Image à copier à partir du point spécifié</param>
            <param name="opacité">Opacité de l'image à copier, -1 pour utiliser le canal alpha de l'image à copier</param>
            <param name="topLeft">Point à partir duquel l'image est copiée</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawImage(Photoshop3000.MyImage,System.Drawing.Rectangle,System.Int32,System.Boolean)">
            <summary>
            Copie un <see cref="T:Photoshop3000.MyImage"/> sur le <see cref="T:Photoshop3000.MyImage"/> de ce <see cref="T:Photoshop3000.MyGraphics"/> dans le <see cref="T:System.Drawing.Rectangle"/> indiqué avec une opacité précisée.
            </summary>
            <param name="imagePremierPlan">Image à copier à partir du point spécifié</param>
            <param name="opacité">Opacité de l'image à copier 0-100, -1 pour utiliser le canal alpha de l'image à copier</param>
            <param name="rect">Rectangle dans lequel copier l'image, peut dépasser du cadre de l'image.</param>
            <param name="sourceAlpha">Utilise la composante alpha de l'image source ou de l'image à dessiner dessus.</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.InternalDrawImage(Photoshop3000.MyImage,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Ajoute les données de l'image sur l'image actuelle en prenant en compte la transparence (s'il y a) de l'image à copier. 
            Peut prendre en charge les dépassements des bords de l'image à dessiner (s'il y a) sur l'image actuelle.
            </summary>
            <param name="drawImage">Image à dessiner</param>
            <param name="origineY">Y</param>
            <param name="origineX">X</param>
            <param name="sourceAlpha">Utilise la composante alpha de l'image source ou de l'image à dessiner dessus.</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawLineBresenham(Photoshop3000.Point,Photoshop3000.Point)">
            <summary>
            Dessine une ligne entre 2 points par la couleur <see cref="P:Photoshop3000.MyGraphics.PixelRemplissage"/>
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawLineBresenham(Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Pixel)">
            <summary>
            Dessine une ligne entre 2 points avec la couleur spécifiée. Basé sur l'algorithme de Bresenham.
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawLineWu(Photoshop3000.Point,Photoshop3000.Point)">
            <summary>
            Dessine une ligne entre 2 points par la couleur <see cref="P:Photoshop3000.MyGraphics.PixelRemplissage"/> avec la méthode de Xiaolin Wu (anticrénelage)
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawLineWu(Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Pixel)">
            <summary>
            Dessine une ligne entre 2 points par la couleur spécifiée avec la méthode de Xiaolin Wu (anticrénelage)
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawBézier(Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Pixel)">
            <summary>
            Ne fonctionne pas.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="color"></param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawCircleBresenham(Photoshop3000.Point,System.Int32,Photoshop3000.Pixel)">
            <summary>
            Dessine un cercle avec le point central et le rayon spécifiés de la couleur spécifiée. Basé sur l'algorithme de Bresenham.
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillCircle(Photoshop3000.Point,System.Int32,Photoshop3000.Pixel)">
            <summary>
            Remplit un cercle formé par son centre et son rayon par la couleur indiquée. Basé sur l'algorithme de Bresenham
            </summary>
            <param name="centre">Centre du cercle</param>
            <param name="rayon">Rayon du cercle</param>
            <param name="color">Couleur de remplissage</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawCarré(Photoshop3000.Point,System.Int32,Photoshop3000.Pixel)">
            <summary>
            Dessine un carré de la taille indiquée avec la couleur spécifiée à l'endroit donné
            </summary>
            <param name="milieu">Coin en haut à gauche du carré à partir duquel le carré est dessiné</param>
            <param name="taille">Taille du carré</param>
            <param name="color">Couleur de remplissage</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillCarré(Photoshop3000.Point,System.Int32,Photoshop3000.Pixel)">
            <summary>
            Remplit un carré de la taille indiquée avec la couleur spécifiée à partir du point du milieu du carré
            </summary>
            <param name="milieu">Coin en haut à gauche du carré à partir duquel le carré est remplit</param>
            <param name="taille">Taille du carré</param>
            <param name="color">Couleur de remplissage</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawRectangle(Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Pixel)">
            <summary>
            Dessine les contours d'un rectangle dont les coordonnées sont spécifiées par 2 coins d'en haut à gauche et d'en bas à droite, par la couleur spécifiée
            </summary>
            <param name="hautGauche">Coin en haut à gauche à partir duquel le rectangle est dessiné</param>
            <param name="basDroit">Coin en bas à droite. Limite du rectangle</param>
            <param name="color">Couleur de remplissage</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillRectangle(Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Pixel)">
            <summary>
            Remplit un rectangle avec la couleur spécifiée à partir des coins à gauche en haut et à droite en bas
            </summary>
            <param name="hautGauche">Coin en haut à gauche à partir duquel le rectangle est remplit</param>
            <param name="basDroit">Coin en bas à droite. Limite du rectangle</param>
            <param name="color">Couleur de remplissage</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillRectangle(System.Drawing.Rectangle,Photoshop3000.Pixel)">
            <summary>
            Remplit un rectangle avec la couleur spécifiée à partir des coins à gauche en haut et à droite en bas
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillTriangle(Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point)">
            <summary>
            Remplit le triangle formé par les <see cref="T:Photoshop3000.Point"/> indiqués par la couleur <see cref="P:Photoshop3000.MyGraphics.PixelRemplissage"/>
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillTriangle(Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Pixel)">
            <summary>
            Remplit par la couleur spécifiée le triangle formé par les <see cref="T:Photoshop3000.Point"/> indiqués
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillForme_4(Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Pixel)">
            <summary>
            Remplit par la couleur spécifiée le quadrilatère formé par les <see cref="T:Photoshop3000.Point"/> indiqués. L'ordre des points n'importe pas
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillForme_5(Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Pixel)">
            <summary>
            Remplit par la couleur spécifiée le pentagone formé par les <see cref="T:Photoshop3000.Point"/> indiqués. L'ordre n'importe pas
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillForme_6(Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Point,Photoshop3000.Pixel)">
            <summary>
            Remplit par la couleur spécifiée l'hexagone formé par les <see cref="T:Photoshop3000.Point"/> indiqués. L'ordre n'importe pas
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillHexagone(Photoshop3000.Point,System.Int32,Photoshop3000.Pixel)">
            <summary>
            Remplit un hexagone parfait à partir du point central indiqué, de la taille indiquée avec la couleur spécifiée
            </summary>
            <param name="centre">Centre de l'hexagone</param>
            <param name="size">Taille de l'hexagone (taille d'un coté)</param>
            <param name="color">Couleur de remplissage</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawHexagone(Photoshop3000.Point,System.Int32,Photoshop3000.Pixel)">
            <summary>
            Dessine le contour d'un hexagone parfait à partir du point central indiqué, de la taille indiquée avec la couleur spécifiée
            </summary>
            <param name="centre">Centre de l'hexagone</param>
            <param name="size">Taille de l'hexagone (taille d'un coté)</param>
            <param name="color">Couleur de remplissage</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.DrawPentagone(Photoshop3000.Point,System.Int32,Photoshop3000.Pixel)">
            <summary>
            Dessine le contour d'un pentagone parfait à partir d'un point central, d'une taille et d'une couleur spécifiés
            </summary>
            <param name="centre">Centre du pentagone</param>
            <param name="size">Taille du pentagone (taille d'un coté)</param>
            <param name="color">Couleur de remplissage</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.FillPentagone(Photoshop3000.Point,System.Int32,Photoshop3000.Pixel)">
            <summary>
            Remplit un pentagone parfait à partir d'un point central, d'une taille et d'une couleur spécifiés
            </summary>
            <param name="centre">Centre du pentagone</param>
            <param name="size">Taille du pentagone (taille d'un coté)</param>
            <param name="color">Couleur de remplissage</param>
        </member>
        <member name="M:Photoshop3000.MyGraphics.IsPointInImage(Photoshop3000.Point)">
            <summary>
            Teste si un <see cref="T:Photoshop3000.Point"/> est présent dans l'image
            </summary>
        </member>
        <member name="M:Photoshop3000.MyGraphics.PointCollisionImage(Photoshop3000.Point,Photoshop3000.Point)">
            <summary>
            Renvoie le <see cref="T:Photoshop3000.Point"/> de l'intersection d'un segment entre 2 <see cref="T:Photoshop3000.Point"/> dont l'un est hors de l'image et les bords de cette image.
            L'intersection avec l'image du segment est nécéssaire sinon le résultat sera faux.
            </summary>
            <param name="pointToChange">Point à changer</param>
            <param name="départ">Point de départ à partir duquel tracer une droite vers le point à changer</param>
            <returns></returns>
        </member>
        <member name="T:Photoshop3000.NombreComplex">
            <summary>
            Représente un nombre complexe à valeur flottante
            </summary>
        </member>
        <member name="P:Photoshop3000.NombreComplex.Re">
            <summary>
            Valeur réelle
            </summary>
        </member>
        <member name="P:Photoshop3000.NombreComplex.Im">
            <summary>
            Valeur imaginaire
            </summary>
        </member>
        <member name="M:Photoshop3000.NombreComplex.#ctor(System.Double,System.Double)">
            <summary>
            Déclare une nouvelle variable <see cref="T:Photoshop3000.NombreComplex"/> avec les paramètres spécifiés
            </summary>
            <param name="reel"></param>
            <param name="imag"></param>
        </member>
        <member name="M:Photoshop3000.NombreComplex.op_Addition(Photoshop3000.NombreComplex,Photoshop3000.NombreComplex)">
            <summary>
            Renvoie le résultat de l'addition entre 2 <see cref="T:Photoshop3000.NombreComplex"/> 
            </summary>
        </member>
        <member name="M:Photoshop3000.NombreComplex.op_Subtraction(Photoshop3000.NombreComplex,Photoshop3000.NombreComplex)">
            <summary>
            Renvoie le résultat de la soustraction entre 2 <see cref="T:Photoshop3000.NombreComplex"/> 
            </summary>
        </member>
        <member name="M:Photoshop3000.NombreComplex.op_Multiply(Photoshop3000.NombreComplex,Photoshop3000.NombreComplex)">
            <summary>
            Renvoie le résultat de la multiplication entre 2 <see cref="T:Photoshop3000.NombreComplex"/> 
            </summary>
        </member>
        <member name="M:Photoshop3000.NombreComplex.op_Division(Photoshop3000.NombreComplex,Photoshop3000.NombreComplex)">
            <summary>
            Renvoie le résultat de la division entre 2 <see cref="T:Photoshop3000.NombreComplex"/> 
            </summary>
        </member>
        <member name="M:Photoshop3000.NombreComplex.op_Implicit(System.Double)~Photoshop3000.NombreComplex">
            <summary>
            Renvoie un nouveau <see cref="T:Photoshop3000.NombreComplex"/> initialisé avec un nombre
            </summary>
        </member>
        <member name="M:Photoshop3000.NombreComplex.Pow(Photoshop3000.NombreComplex,System.Double)">
            <summary>
            Renvoie le résultat d'un <see cref="T:Photoshop3000.NombreComplex"/> élevé à la puissance spécifiée
            </summary>
        </member>
        <member name="M:Photoshop3000.NombreComplex.Sin(Photoshop3000.NombreComplex)">
            <summary>
            Renvoie le sinus du <see cref="T:Photoshop3000.NombreComplex"/> indiqué
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.NombreComplex.Cos(Photoshop3000.NombreComplex)">
            <summary>
            Renvoie le cosinus du <see cref="T:Photoshop3000.NombreComplex"/> indiqué
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.NombreComplex.GetModuleCarré">
            <summary>
            Renvoie le module d'un <see cref="T:Photoshop3000.NombreComplex"/> passé en paramètre
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.NombreComplex.GetModule(Photoshop3000.NombreComplex)">
            <summary>
            Renvoie le module d'un <see cref="T:Photoshop3000.NombreComplex"/> passé en paramètre
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.NombreComplex.GetModule">
            <summary>
            Renvoie le module du <see cref="T:Photoshop3000.NombreComplex"/> 
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.NombreComplex.GetDistance(Photoshop3000.NombreComplex,Photoshop3000.NombreComplex)">
            <summary>
            Renvoie la distance entre 2 <see cref="T:Photoshop3000.NombreComplex"/>
            </summary>
            <param name="z"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.NombreComplex.GetDistance(Photoshop3000.NombreComplex)">
            <summary>
            Renvoie la distance entre 2 <see cref="T:Photoshop3000.NombreComplex"/>
            </summary>
        </member>
        <member name="T:Photoshop3000.Pixel">
            <summary>
            Représente un pixel A-R-G-B d'une image, composé de 3 nuances de couleurs : rouges, vertes et bleues et d'une transparence Alpha
            </summary>
        </member>
        <member name="F:Photoshop3000.Pixel.ArgbAlphaShift">
            <summary>
            Décalage alpha
            </summary>
        </member>
        <member name="F:Photoshop3000.Pixel.ArgbRedShift">
            <summary>
            Décalage rouge
            </summary>
        </member>
        <member name="F:Photoshop3000.Pixel.ArgbGreenShift">
            <summary>
            Décalage vert
            </summary>
        </member>
        <member name="F:Photoshop3000.Pixel.ArgbBlueShift">
            <summary>
            Décalage bleu
            </summary>
        </member>
        <member name="P:Photoshop3000.Pixel.R">
            <summary>
            Composante rouge
            </summary>
        </member>
        <member name="P:Photoshop3000.Pixel.G">
            <summary>
            Composante verte
            </summary>
        </member>
        <member name="P:Photoshop3000.Pixel.B">
            <summary>
            Composante bleue
            </summary>
        </member>
        <member name="P:Photoshop3000.Pixel.A">
            <summary>
            Transparence Alpha (0-255)
            </summary>
        </member>
        <member name="F:Photoshop3000.Pixel.Zero">
            <summary>
            Pixel de base, noir + opaque.
            </summary>
        </member>
        <member name="M:Photoshop3000.Pixel.#ctor(System.Int32)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Photoshop3000.Pixel"/> à partir de composants rouge vert et bleu et d'une transparence alpha
            </summary>
            <param name="argb">rouge</param>
        </member>
        <member name="M:Photoshop3000.Pixel.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Renvoie une nouvelle instance de la structure <see cref="T:Photoshop3000.Pixel"/> à partir de composants rouge vert et bleu
            </summary>
        </member>
        <member name="M:Photoshop3000.Pixel.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renvoie une nouvelle instance de la structure <see cref="T:Photoshop3000.Pixel"/> à partir d'une transparence et de composants rouge vert et bleu
            </summary>
            <param name="Alpha"></param>
            <param name="R"></param>
            <param name="G"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.FromArgb(System.Int32)">
            <summary>
            Renvoie une nouvelle instance de la structure <see cref="T:Photoshop3000.Pixel"/> à partir d'un entier à 4 octets au format litte 
            endian contenant dans cet ordre le bleu, le vert, le rouge et la transparence
            </summary>
            <param name="argb"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.FromColor(Photoshop3000.Couleurs)">
            <summary>
            Renvoie une nouvelle instance de la structure <see cref="T:Photoshop3000.Pixel"/> à partir d'une couleur <see cref="T:Photoshop3000.Couleurs"/>
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.FromColor(System.Drawing.Color)">
            <summary>
            Renvoie une nouvelle instance de la structure <see cref="T:Photoshop3000.Pixel"/> à partir d'une <see cref="T:System.Drawing.Color"/>
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.FromHSL(System.Int32,System.Single,System.Single)">
            <summary>
            Renvoie une nouvelle instance de la structure <see cref="T:Photoshop3000.Pixel"/> à partir des composants TSV ou TSL (teinte, saturation, luminosité/valeur), HSL ou HSV en anglais
            </summary>
            <param name="hue">Teinte en degré % 360</param>
            <param name="sat">Saturation par rapport à 1</param>
            <param name="lum">Luminosité par rapport à 1</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.op_Equality(Photoshop3000.Pixel,Photoshop3000.Pixel)">
            <summary>
            Renvoie <see langword="true"/> si les 2 pixels ont les mêmes composantes R-G-B
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.op_Inequality(Photoshop3000.Pixel,Photoshop3000.Pixel)">
            <summary>
            Renvoie <see langword="false"/> si les 2 pixels ont les mêmes composantes R-G-B
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.op_Explicit(Photoshop3000.Couleurs)~Photoshop3000.Pixel">
            <summary>
            Renvoie le Pixel équivalent de ce Couleurs enum.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Photoshop3000.Pixel.Moyenne">
            <summary>
            Renvoie la moyenne des couleurs du Pixel
            </summary>
        </member>
        <member name="M:Photoshop3000.Pixel.TransformationGris(System.Int32)">
            <summary>
            Renvoie un pixel en son équivalent en gris
            </summary>
            <param name="intensité"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.TransformationLuminosité(System.Int32)">
            <summary>
            Renvoie un pixel en augmentant la luminosité en fonction d'un facteur intensité
            </summary>
            <param name="intensité">Pourcentage d'intensité</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.InversionCouleur">
            <summary>
            Renvoie le <see cref="T:Photoshop3000.Pixel"/> avec les couleurs inversées
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.TransformationSépia">
            <summary>
            Renvoie un pixel en tonalités sépia
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.AddTransparence(Photoshop3000.Pixel,Photoshop3000.Pixel,System.Single)">
            <summary>
            Ajoute une transparence alpha à un pixel, le pixel résultant a une transparence A = 255.
            </summary>
            <param name="alpha">Transparence, 0 à 1</param>
            <param name="backgroundPixel">Pixel de devant</param>
            <param name="foregroundPixel">Pixel de derrière</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.GetCouleur(Photoshop3000.Pixel)">
            <summary>
            Récupère la <see cref="T:Photoshop3000.Couleurs"/> la plus proche du <see cref="T:Photoshop3000.Pixel"/> entré en paramètre
            </summary>
            <param name="p">Pixel</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.Divergence(Photoshop3000.Pixel,Photoshop3000.Pixel)">
            <summary>
            Renvoie en % la différence de couleur entre ces 2 pixels. Prend en compte la composante alpha.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.MoyennePixels(Photoshop3000.Pixel,Photoshop3000.Pixel)">
            <summary>
            Renvoie la moyenne entre 2 pixels
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.Brightness">
            <summary>
            Récupère la luminosité perçue du Pixel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.Hue">
            <summary>
            Récupère la teinte d'un Pixel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.Lightness">
            <summary>
            Récupère la luminosité du Pixel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.Saturation">
            <summary>
            Récupère la saturation du Pixel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.ToString">
            <summary>
            Renvoie une chaine de charactère décrivant le <see cref="T:Photoshop3000.Pixel"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.ToArgb">
            <summary>
            Renvoie une valeur 32 bits de cette instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.MakeARGB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renvoie l'équivalent 32 bits de ces 4 valeurs
            </summary>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Pixel.ToColor">
            <summary>
            Renvoie le <see cref="T:Photoshop3000.Pixel"/> sous forme d'un <see cref="T:System.Drawing.Color"/>
            </summary>
            <returns></returns>
        </member>
        <member name="F:Photoshop3000.Pixel.CouleursTableau">
            <summary>
            R-G-B
            </summary>
        </member>
        <member name="T:Photoshop3000.Couleurs">
            <summary>
            Types de couleurs de base. ~40 couleurs disponibles
            </summary>
        </member>
        <member name="F:Photoshop3000.Pixellisation.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.Pixellisation.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.Pixellisation.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Photoshop3000.Point">
            <summary>
            Représente une coordonnée flottante dans un plan à 2 dimensions.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Photoshop3000.Point.Zero" -->
        <member name="P:Photoshop3000.Point.X">
            <summary>
            Position sur l'axe des abscisses
            </summary>
        </member>
        <member name="P:Photoshop3000.Point.Y">
            <summary>
            Position sur l'axe des ordonnées
            </summary>
        </member>
        <member name="M:Photoshop3000.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initialise une nouvelle instance de la structure <see cref="T:Photoshop3000.Point"/> avec les coordonnées spécifiées
            </summary>
            <param name="y">Axe des ordonnées</param>
            <param name="x">Axe des abscisses</param>
        </member>
        <member name="M:Photoshop3000.Point.op_Equality(Photoshop3000.Point,Photoshop3000.Point)">
            <summary>
            Renvoie <see langword="true"/> si les 2 <see cref="T:Photoshop3000.Point"/> passés en paramètres ont les mêmes coordonnées
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Point.op_Inequality(Photoshop3000.Point,Photoshop3000.Point)">
            <summary>
            Renvoie <see langword="true"/> si les 2 <see cref="T:Photoshop3000.Point"/> passés en paramètres ont des coordonnées différentes
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.Point.Equals(System.Object)">
            <summary>
            Retourne <see langword="true"/> si le <see cref="T:Photoshop3000.Point"/> passé en paramètres a les même coordonnées que cette instance
            </summary>
            <param name="obj">Objet <see cref="T:Photoshop3000.Point"/></param>
            <returns>this == obj as Point</returns>
        </member>
        <member name="M:Photoshop3000.Point.SwapXY">
            <summary>
            Echange les coordonnées en x et y d'un <see cref="T:Photoshop3000.Point"/>
            </summary>
        </member>
        <member name="M:Photoshop3000.Program.Main">
            <summary>
            Point d'entrée principal de l'application.
            </summary>
        </member>
        <member name="T:Photoshop3000.MyImage">
            <summary>
            Permet de créer, de lire et de sauvegarder un fichier .bmp, .csv (au format bitmap), .jpg (windows) ou .png (windows).
            <para/>Peut prendre en charge n'importe quel type d'image au format de pixel 32 bpp ou 24 bpp.
            </summary>
        </member>
        <member name="F:Photoshop3000.MyImage.data">
            <summary>
            Données de pixels de l'image. Le format dépend de <see cref="F:Photoshop3000.MyImage.pixelFormat"/>.
            </summary>
        </member>
        <member name="F:Photoshop3000.MyImage.lengthPixel">
            <summary>
            Longueur en byte d'un pixel
            </summary>
        </member>
        <member name="F:Photoshop3000.MyImage.pixelFormat">
            <summary>
            Format pivot utilisé.
            </summary>
        </member>
        <member name="P:Photoshop3000.MyImage.PixelFormat">
            <summary>
            Format pivot utilisé. Modifiable via <see cref="M:Photoshop3000.MyImage.ConvertPixelFormat(Photoshop3000.Formats.PixelFormat)"/>.
            </summary>
        </member>
        <member name="P:Photoshop3000.MyImage.Width">
            <summary>
            Renvoie la largeur en pixels du <see cref="T:Photoshop3000.MyImage"/>
            </summary>
        </member>
        <member name="P:Photoshop3000.MyImage.Height">
            <summary>
            Renvoie la hauteur en pixels du <see cref="T:Photoshop3000.MyImage"/>
            </summary>
        </member>
        <member name="P:Photoshop3000.MyImage.Stride">
            <summary>
            Renvoie le nombre d'octets qui composent une ligne de donnée du <see cref="T:Photoshop3000.MyImage"/> (padding compris)
            </summary>
        </member>
        <member name="P:Photoshop3000.MyImage.Validité">
            <summary>
            Indique la validité du <see cref="T:Photoshop3000.MyImage"/>.
            </summary>
        </member>
        <member name="P:Photoshop3000.MyImage.Item(System.Int32,System.Int32)">
            <summary>
            Obtient ou définit le <see cref="T:Photoshop3000.Pixel"/> à partir des coordonnées spécifiées
            </summary>
            <param name="y">Ligne</param>
            <param name="x">Colonne</param>
        </member>
        <member name="M:Photoshop3000.MyImage.GetPosition(System.Int32,System.Int32)">
            <summary>
            Renvoie la position de la première composante d'un pixel dans le tableau de donnée en fonction de ses coordonnées dans l'image.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyImage.#ctor">
            <summary>
            Constructeur vide, l'image ne sera pas valide.
            </summary>
        </member>
        <member name="M:Photoshop3000.MyImage.#ctor(System.String)">
            <summary>
            Crée une nouvelle instance de la classe <see cref="T:Photoshop3000.MyImage"/> à partir du nom de fichier indiqué.
            </summary>
            <param name="filename">Chemin</param>
            <exception cref="T:System.ArgumentException">Fichier null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Le fichier n'existe pas ou n'a pas été trouvé.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Levée quand l'image est trop petite (0 généralement).</exception>
            <exception cref="T:System.BadImageFormatException">Levée quand le format d'image n'est pas valide ou n'est pas supporté.</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.#ctor(System.Int32,System.Int32,Photoshop3000.Formats.PixelFormat)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.MyImage"/> à partir de nouvelles dimensions de hauteur et de largeur.
            <para/> L'image est automatiquement initialisée en noire (+ transparente si 32 bpp)
            </summary>
            <param name="height">Hauteur</param>
            <param name="width">Largeur</param>
            <param name="format">Format</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Levée quand l'image est trop petite (0 généralement).</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.#ctor(System.Int32,System.Int32,Photoshop3000.Pixel,Photoshop3000.Formats.PixelFormat)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.MyImage"/> à partir de nouvelles dimensions de hauteur et de largeur. 
            <para/>L'image est remplie par la couleur spécifiée
            </summary>
            <param name="height">Hauteur</param>
            <param name="width">Largeur</param>
            <param name="couleurRemplissage">Pixel de remplissage de l'image</param>
            <param name="format">Format</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Levée quand l'image est trop petite (0 généralement).</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.#ctor(Photoshop3000.MyImage,System.Int32,System.Int32)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.MyImage"/> à partir d'une copie d'un <see cref="T:Photoshop3000.MyImage"/> à redimensionner. 
            </summary>
            <param name="image">Image à redimensionner</param>
            <param name="newHeight">Hauteur de la nouvelle image.</param>
            <param name="newWidth">Largeur de la nouvelle image.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Levée quand l'image est trop petite (0 généralement).</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Photoshop3000.MyImage"/> à partir d'un <see cref="T:System.Drawing.Bitmap"/>
            </summary>
            <param name="bmp">bitmap</param>
            <exception cref="T:System.FormatException">Levée quand le format de pixel n'est pas valide.</exception>
            <exception cref="T:System.ArgumentNullException">Levée quand le bitmap entré en paramètre est null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Levée quand l'image est trop petite (0 généralement).</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.ToBitmap">
            <summary>
            Renvoie le <see cref="T:Photoshop3000.MyImage"/> sous forme d'un <see cref="T:System.Drawing.Bitmap"/>
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">Levée quand l'image n'est pas valide.</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.Clone">
            <summary>
            Réalise une copie profonde de ce <see cref="T:Photoshop3000.MyImage"/> et renvoie le nouvel objet <see cref="T:Photoshop3000.MyImage"/> résultant.
            </summary>
            <exception cref="T:System.InvalidCastException">Levée quand l'image n'est pas valide.</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.ToBGRArray">
            <summary>
            Renvoie le tableau de données bgr ou bgra au <see cref="T:Photoshop3000.Formats.PixelFormat"/> .bmp de cette instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyImage.op_Equality(Photoshop3000.MyImage,Photoshop3000.MyImage)">
            <summary>
            Renvoie <see langword="true"></see> si tous les Pixels des 2 images sont les mêmes ou si les 2 images sont <see langword="null"/>
            </summary>
            <param name="a">image 1</param>
            <param name="b">image 2</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyImage.op_Inequality(Photoshop3000.MyImage,Photoshop3000.MyImage)">
            <summary>
            Renvoie <see langword="false"></see> si tous les Pixels des 2 images sont les mêmes ou si les 2 images sont <see langword="null"/>
            </summary>
            <param name="a">image 1</param>
            <param name="b">image 2</param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyImage.ChangeSize(System.Int32,System.Int32)">
            <summary>
            Permet de changer la taille d'un <see cref="T:Photoshop3000.MyImage"/>. Réinitialise le tableau de <see cref="T:Photoshop3000.Pixel"/>
            </summary>
            <param name="newHeight"></param>
            <param name="newWidth"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Tailles non valides.</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.ChangeData(System.Byte[])">
            <summary>
            Change le tableau de données de ce <see cref="T:Photoshop3000.MyImage"/>. Doit forcément être conforme au format de données actuel.
            </summary>
            <param name="données"></param>
            <exception cref="T:System.ArgumentNullException">Tableau null ou = 0</exception>
            <exception cref="T:System.FormatException">Tableau non valide (trop petit probablement).</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.ConvertPixelFormat(Photoshop3000.Formats.PixelFormat)">
            <summary>
            Convertit l'image au format spécifié, des données peuvent alors être supprimées : 32 -> 24  = perte alpha, 24 -> 32 = alpha=>255
            </summary>
            <param name="destFormat">Format vers lequel convertir le <see cref="T:Photoshop3000.MyImage"/></param>
            <exception cref="T:System.ArgumentException">Format de destination invalide</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.GetPadding">
            <summary>
            Renvoie le nombre d'octets qui composent le padding de fin de ligne de cette image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyImage.InitializeData">
            <summary>
            Renvoie un tableau de données au format bitmap à partir des paramètres pré-définis de ce <see cref="T:Photoshop3000.MyImage"/>.
            </summary>
        </member>
        <member name="M:Photoshop3000.MyImage.InitializeDataFromDataArray(System.Byte[])">
            <summary>
            Initialise et remplit la matrice de données à partir d'un tableau de <see cref="T:System.Byte"/> au format bitmap.
            </summary>
            <param name="données">Tableau contenant les infos liées aux pixels de l'image au format bitmap</param>
        </member>
        <member name="M:Photoshop3000.MyImage.InitializeMyImageFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Initialise le MyImage à partir d'un Bitmap système.
            </summary>
            <param name="bmp"></param>
        </member>
        <member name="M:Photoshop3000.MyImage.InitializeMyImageFromDataArray(System.Byte[],System.Int32,Photoshop3000.Formats.PixelFormat,System.Boolean)">
            <summary>
            Change le tableau de données de ce <see cref="T:Photoshop3000.MyImage"/>. Vérifie que le tableau est bien conforme aux paramètres donnés.
            </summary>
            <param name="données"></param>
            <param name="imageWidth"></param>
            <param name="pf"></param>
            <param name="copyDirectly">le tab de donnée de cette instance devient celui entré en paramètre, sinon il est copié.</param>
            <exception cref="T:System.ArgumentNullException">Tableau null ou = 0</exception>
            <exception cref="T:System.FormatException">Tableau non valide (trop petit probablement).</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.InitializeMyImageFromFile(Photoshop3000.MyImage,System.String,Photoshop3000.Formats.ImageFormat)">
            <summary>
            Crée le <see cref="T:Photoshop3000.MyImage"/> à partir du nom du fichier de l'image à récupérer.
            </summary>
            <param name="image">Image à initialiser</param>
            <param name="filename">Nom du fichier</param>
            <param name="ext"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Levée quand l'image est trop petite (0 généralement).</exception>
            <exception cref="T:System.BadImageFormatException">Levée quand le format d'image n'est pas valide ou n'est pas supporté.</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.CreateBitmapArrayFromFile(System.String,Photoshop3000.Formats.ImageFormat)">
            <summary>
            Renvoie le fichier d'image sous forme d'un tableau de <see cref="T:System.Byte"/>.
            </summary>
            <param name="filename">Chemin d'accès au fichier</param>
            <param name="imF"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyImage.InitializeMyImageFromBitmapArray(Photoshop3000.MyImage,System.Byte[])">
            <summary>
            Initialise le <see cref="T:Photoshop3000.MyImage"/> à partir d'un tableau au format bitmap 24 ou 32bpp
            </summary>
            <param name="image">Image à initialiser</param>
            <param name="dataFromFile"></param>
            <exception cref="T:System.ArgumentException">Tab non valide</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.ConformitéBitmapHeaders(Photoshop3000.BITMAPHEADER,Photoshop3000.BITMAPHEADER_32,System.Boolean@)">
            <summary>
            Regarde la conformité des header par rapport aux constantes de <see cref="T:Photoshop3000.BITMAPCONST"/>. Header32 bpp peut etre null.
            <see langword="OUT"/> un bool indiquant si le fichier est compressé ou non..
            </summary>
        </member>
        <member name="M:Photoshop3000.MyImage.GetOrderRgba(Photoshop3000.BITMAPHEADER_32)">
            <summary>
            Renvoie l'ordre pour chaque composant dans chaque byte (1, 2, 3, 4 => rgba format little endian). 32 bpp uniquement.
            Habituellement va renvoyer { 3, 2, 1, 4 }.
            </summary>
            <param name="header32"></param>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyImage.Save(System.String)">
            <summary>
            Sauvegarde ce <see cref="T:Photoshop3000.MyImage"/> dans le fichier sélectionné. Overwrite si le fichier existe déjà.
            <para/>On sauvegarde en prenant en compte le format de pixels <see cref="P:Photoshop3000.MyImage.PixelFormat"/> spécifié.
            </summary>
            <param name="filename">Chemin de sauvegarde</param>
            <exception cref="T:System.InvalidCastException">Le fichier n'existe pas ou n'a pas été trouvé.</exception>
            <exception cref="T:System.ArgumentException">Levée quand le nom du fichier est null.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Levée quand le dossier de sauvegarde est introuvable.</exception>
            <exception cref="T:System.IO.FileLoadException">Levée quand le format d'image n'est pas valide ou n'est pas supporté.</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.Save(System.String,Photoshop3000.MyImageSaveFormat)">
            <summary>
            Sauvegarde ce <see cref="T:Photoshop3000.MyImage"/> dans le fichier sélectionné au format indiqué. Overwrite si le fichier existe déjà.
            <para/>On sauvegarde en prenant en compte le format de pixels <see cref="P:Photoshop3000.MyImage.PixelFormat"/> spécifié.
            </summary>
            <param name="filename">Chemin de sauvegarde</param>
            <param name="format">Format de sauvegarde</param>
            <exception cref="T:System.InvalidCastException">Le fichier n'existe pas ou n'a pas été trouvé.</exception>
            <exception cref="T:System.ArgumentException">Levée quand le nom du fichier est null.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Levée quand le dossier de sauvegarde est introuvable.</exception>
            <exception cref="T:System.IO.FileLoadException">Levée quand le format d'image n'est pas valide ou n'est pas supporté.</exception>
        </member>
        <member name="M:Photoshop3000.MyImage.CreateBitmapArray(Photoshop3000.MyImage,Photoshop3000.MyImageSaveFormat)">
            <summary>
            Convertit le tableau de données de pixels en un tableau de byte au format bitmap .bmp
            </summary>
            <returns></returns>
        </member>
        <member name="M:Photoshop3000.MyImage.SerializeHeaderInfo(System.Byte[],Photoshop3000.MyImageSaveFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copie dans ce tableau le header info associé au format de sauvegarde et aux différentes variables indiquées.
            </summary>
        </member>
        <member name="F:Photoshop3000.RognageImage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.RognageImage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.RognageImage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Photoshop3000.StéganographieForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Photoshop3000.StéganographieForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Photoshop3000.StéganographieForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Photoshop3000.Properties.Resources">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:Photoshop3000.Properties.Resources.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:Photoshop3000.Properties.Resources.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
        <member name="P:Photoshop3000.Properties.Resources.newTab">
            <summary>
              Recherche une ressource localisée de type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:ReedSolomon.GenericGF">
            <summary>
              <p>This class contains utility methods for performing mathematical operations over
            the Galois Fields. Operations use a given primitive polynomial in calculations.</p>
              <p>Throughout this package, elements of the GF are represented as an {@code int}
            for convenience and speed (but at the cost of memory).
              </p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ReedSolomon.GenericGF.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a representation of GF(size) using the given primitive polynomial.
            </summary>
            <param name="primitive">irreducible polynomial whose coefficients are represented by
            *  the bits of an int, where the least-significant bit represents the constant
            *  coefficient</param>
            <param name="size">the size of the field</param>
            <param name="genBase">the factor b in the generator polynomial can be 0- or 1-based
            *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).
            *  In most cases it should be 1, but for QR code it is 0.</param>
        </member>
        <member name="M:ReedSolomon.GenericGF.BuildMonomial(System.Int32,System.Int32)">
            <summary>
            Builds the monomial.
            </summary>
            <param name="degree">The degree.</param>
            <param name="coefficient">The coefficient.</param>
            <returns>the monomial representing coefficient * x^degree</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.AddOrSubtract(System.Int32,System.Int32)">
            <summary>
            Implements both addition and subtraction -- they are the same in GF(size).
            </summary>
            <returns>sum/difference of a and b</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Exp(System.Int32)">
            <summary>
            Exps the specified a.
            </summary>
            <returns>2 to the power of a in GF(size)</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Log(System.Int32)">
            <summary>
            Logs the specified a.
            </summary>
            <param name="a">A.</param>
            <returns>base 2 log of a in GF(size)</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Inverse(System.Int32)">
            <summary>
            Inverses the specified a.
            </summary>
            <returns>multiplicative inverse of a</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Multiply(System.Int32,System.Int32)">
            <summary>
            Multiplies the specified a with b.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>product of a and b in GF(size)</returns>
        </member>
        <member name="P:ReedSolomon.GenericGF.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:ReedSolomon.GenericGF.GeneratorBase">
            <summary>
            Gets the generator base.
            </summary>
        </member>
        <member name="M:ReedSolomon.GenericGF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:ReedSolomon.GenericGFPoly">
            <summary>
            <p>Represents a polynomial whose coefficients are elements of a GF.
            Instances of this class are immutable.</p>
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ReedSolomon.GenericGFPoly.#ctor(ReedSolomon.GenericGF,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:ReedSolomon.GenericGFPoly"/> class.
            </summary>
            <param name="field">the {@link GenericGF} instance representing the field to use
            to perform computations</param>
            <param name="coefficients">coefficients as ints representing elements of GF(size), arranged
            from most significant (highest-power term) coefficient to least significant</param>
            <exception cref="T:System.ArgumentException">if argument is null or empty,
            or if leading coefficient is 0 and this is not a
            constant polynomial (that is, it is not the monomial "0")</exception>
        </member>
        <member name="P:ReedSolomon.GenericGFPoly.Degree">
            <summary>
            degree of this polynomial
            </summary>
        </member>
        <member name="P:ReedSolomon.GenericGFPoly.IsZero">
            <summary>
            Gets a value indicating whether this <see cref="T:ReedSolomon.GenericGFPoly"/> is zero.
            </summary>
            <value>true iff this polynomial is the monomial "0"</value>
        </member>
        <member name="M:ReedSolomon.GenericGFPoly.GetCoefficient(System.Int32)">
            <summary>
            coefficient of x^degree term in this polynomial
            </summary>
            <param name="degree">The degree.</param>
            <returns>coefficient of x^degree term in this polynomial</returns>
        </member>
        <member name="M:ReedSolomon.GenericGFPoly.EvaluateAt(System.Int32)">
            <summary>
            evaluation of this polynomial at a given point
            </summary>
            <param name="a">A.</param>
            <returns>evaluation of this polynomial at a given point</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Encode(System.Byte[],System.Int32,ReedSolomon.ErrorCorrectionCodeType)">
            <summary>
            Produces error correction codewords for a message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The message to compute the error correction codewords.</param>
            <param name="eccCount">The number of error correction codewords desired.</param>
            <param name="eccType">The type of Galois field to use to encode error correction codewords.</param>
            <returns>Returns the computed error correction codewords.</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Encode(System.Byte[],System.Int32)">
            <summary>
            Produces error correction codewords for a message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The message to compute the error correction codewords.</param>
            <param name="eccCount">The number of error correction codewords desired.</param>
            <returns>Returns the computed error correction codewords.</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Decode(System.Byte[],System.Byte[],ReedSolomon.ErrorCorrectionCodeType)">
            <summary>
            Repairs a possibly broken message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The possibly broken message to repair.</param>
            <param name="ecc">The available error correction codewords.</param>
            <param name="eccType">The type of Galois field to use to decode message.</param>
            <returns>Returns the repaired message, or null if it cannot be repaired.</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Decode(System.Byte[],System.Byte[])">
            <summary>
            Repairs a possibly broken message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The possibly broken message to repair.</param>
            <param name="ecc">The available error correction codewords.</param>
            <returns>Returns the repaired message, or null if it cannot be repaired.</returns>
        </member>
        <member name="T:ReedSolomon.ReedSolomonDecoder">
            <summary> <p>Implements Reed-Solomon decoding, as the name implies.</p>
            
            <p>The algorithm will not be explained here, but the following references were helpful
            in creating this implementation:</p>
            
            <ul>
            <li>Bruce Maggs.
            <a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/rs_decode.ps">
            "Decoding Reed-Solomon Codes"</a> (see discussion of Forney's Formula)</li>
            <li>J.I. Hall. <a href="www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf">
            "Chapter 5. Generalized Reed-Solomon Codes"</a>
            (see discussion of Euclidean algorithm)</li>
            </ul>
            
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            
            </summary>
            <author>Sean Owen</author>
            <author>William Rucklidge</author>
            <author>sanfordsquires</author>
        </member>
        <member name="M:ReedSolomon.ReedSolomonDecoder.Decode(System.Int32[],System.Int32)">
            <summary>
              <p>Decodes given set of received codewords, which include both data and error-correction
            codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,
            in the input.</p>
            </summary>
            <param name="received">data and error-correction codewords</param>
            <param name="twoS">number of error-correction codewords available</param>
            <returns>false: decoding fails</returns>
        </member>
        <member name="T:ReedSolomon.ReedSolomonEncoder">
            <summary>
            Implements Reed-Solomon encoding, as the name implies.
            </summary>
            <author>Sean Owen</author>
            <author>William Rucklidge</author>
        </member>
    </members>
</doc>
